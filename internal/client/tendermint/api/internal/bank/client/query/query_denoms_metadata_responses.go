// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QueryDenomsMetadataReader is a Reader for the QueryDenomsMetadata structure.
type QueryDenomsMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryDenomsMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryDenomsMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewQueryDenomsMetadataDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQueryDenomsMetadataOK creates a QueryDenomsMetadataOK with default headers values
func NewQueryDenomsMetadataOK() *QueryDenomsMetadataOK {
	return &QueryDenomsMetadataOK{}
}

/*
QueryDenomsMetadataOK describes a response with status code 200, with default header values.

A successful response.
*/
type QueryDenomsMetadataOK struct {
	Payload *QueryDenomsMetadataOKBody
}

// IsSuccess returns true when this query denoms metadata o k response has a 2xx status code
func (o *QueryDenomsMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query denoms metadata o k response has a 3xx status code
func (o *QueryDenomsMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query denoms metadata o k response has a 4xx status code
func (o *QueryDenomsMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query denoms metadata o k response has a 5xx status code
func (o *QueryDenomsMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query denoms metadata o k response a status code equal to that given
func (o *QueryDenomsMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query denoms metadata o k response
func (o *QueryDenomsMetadataOK) Code() int {
	return 200
}

func (o *QueryDenomsMetadataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/denoms_metadata][%d] queryDenomsMetadataOK %s", 200, payload)
}

func (o *QueryDenomsMetadataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/denoms_metadata][%d] queryDenomsMetadataOK %s", 200, payload)
}

func (o *QueryDenomsMetadataOK) GetPayload() *QueryDenomsMetadataOKBody {
	return o.Payload
}

func (o *QueryDenomsMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryDenomsMetadataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryDenomsMetadataDefault creates a QueryDenomsMetadataDefault with default headers values
func NewQueryDenomsMetadataDefault(code int) *QueryDenomsMetadataDefault {
	return &QueryDenomsMetadataDefault{
		_statusCode: code,
	}
}

/*
QueryDenomsMetadataDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type QueryDenomsMetadataDefault struct {
	_statusCode int

	Payload *QueryDenomsMetadataDefaultBody
}

// IsSuccess returns true when this query denoms metadata default response has a 2xx status code
func (o *QueryDenomsMetadataDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this query denoms metadata default response has a 3xx status code
func (o *QueryDenomsMetadataDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this query denoms metadata default response has a 4xx status code
func (o *QueryDenomsMetadataDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this query denoms metadata default response has a 5xx status code
func (o *QueryDenomsMetadataDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this query denoms metadata default response a status code equal to that given
func (o *QueryDenomsMetadataDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the query denoms metadata default response
func (o *QueryDenomsMetadataDefault) Code() int {
	return o._statusCode
}

func (o *QueryDenomsMetadataDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/denoms_metadata][%d] Query_DenomsMetadata default %s", o._statusCode, payload)
}

func (o *QueryDenomsMetadataDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/denoms_metadata][%d] Query_DenomsMetadata default %s", o._statusCode, payload)
}

func (o *QueryDenomsMetadataDefault) GetPayload() *QueryDenomsMetadataDefaultBody {
	return o.Payload
}

func (o *QueryDenomsMetadataDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryDenomsMetadataDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
QueryDenomsMetadataDefaultBody query denoms metadata default body
swagger:model QueryDenomsMetadataDefaultBody
*/
type QueryDenomsMetadataDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*QueryDenomsMetadataDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this query denoms metadata default body
func (o *QueryDenomsMetadataDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryDenomsMetadataDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Query_DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Query_DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query denoms metadata default body based on the context it is used
func (o *QueryDenomsMetadataDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryDenomsMetadataDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Query_DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Query_DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryDenomsMetadataDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryDenomsMetadataDefaultBody) UnmarshalBinary(b []byte) error {
	var res QueryDenomsMetadataDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryDenomsMetadataDefaultBodyDetailsItems0 query denoms metadata default body details items0
swagger:model QueryDenomsMetadataDefaultBodyDetailsItems0
*/
type QueryDenomsMetadataDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// query denoms metadata default body details items0
	QueryDenomsMetadataDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *QueryDenomsMetadataDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv QueryDenomsMetadataDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.QueryDenomsMetadataDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o QueryDenomsMetadataDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.QueryDenomsMetadataDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.QueryDenomsMetadataDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this query denoms metadata default body details items0
func (o *QueryDenomsMetadataDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query denoms metadata default body details items0 based on context it is used
func (o *QueryDenomsMetadataDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryDenomsMetadataDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryDenomsMetadataDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res QueryDenomsMetadataDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryDenomsMetadataOKBody query denoms metadata o k body
swagger:model QueryDenomsMetadataOKBody
*/
type QueryDenomsMetadataOKBody struct {

	// metadatas
	Metadatas []*QueryDenomsMetadataOKBodyMetadatasItems0 `json:"metadatas"`

	// pagination
	Pagination *QueryDenomsMetadataOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this query denoms metadata o k body
func (o *QueryDenomsMetadataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadatas(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryDenomsMetadataOKBody) validateMetadatas(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadatas) { // not required
		return nil
	}

	for i := 0; i < len(o.Metadatas); i++ {
		if swag.IsZero(o.Metadatas[i]) { // not required
			continue
		}

		if o.Metadatas[i] != nil {
			if err := o.Metadatas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryDenomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryDenomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *QueryDenomsMetadataOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryDenomsMetadataOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryDenomsMetadataOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this query denoms metadata o k body based on the context it is used
func (o *QueryDenomsMetadataOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetadatas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryDenomsMetadataOKBody) contextValidateMetadatas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Metadatas); i++ {

		if o.Metadatas[i] != nil {

			if swag.IsZero(o.Metadatas[i]) { // not required
				return nil
			}

			if err := o.Metadatas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryDenomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryDenomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *QueryDenomsMetadataOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryDenomsMetadataOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryDenomsMetadataOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBody) UnmarshalBinary(b []byte) error {
	var res QueryDenomsMetadataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryDenomsMetadataOKBodyMetadatasItems0 query denoms metadata o k body metadatas items0
swagger:model QueryDenomsMetadataOKBodyMetadatasItems0
*/
type QueryDenomsMetadataOKBodyMetadatasItems0 struct {

	// base
	Base string `json:"base,omitempty"`

	// denom units
	DenomUnits []*QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0 `json:"denom_units"`

	// description
	Description string `json:"description,omitempty"`

	// display
	Display string `json:"display,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// symbol
	Symbol string `json:"symbol,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`

	// uri hash
	URIHash string `json:"uri_hash,omitempty"`
}

// Validate validates this query denoms metadata o k body metadatas items0
func (o *QueryDenomsMetadataOKBodyMetadatasItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDenomUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryDenomsMetadataOKBodyMetadatasItems0) validateDenomUnits(formats strfmt.Registry) error {
	if swag.IsZero(o.DenomUnits) { // not required
		return nil
	}

	for i := 0; i < len(o.DenomUnits); i++ {
		if swag.IsZero(o.DenomUnits[i]) { // not required
			continue
		}

		if o.DenomUnits[i] != nil {
			if err := o.DenomUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denom_units" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denom_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query denoms metadata o k body metadatas items0 based on the context it is used
func (o *QueryDenomsMetadataOKBodyMetadatasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDenomUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryDenomsMetadataOKBodyMetadatasItems0) contextValidateDenomUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DenomUnits); i++ {

		if o.DenomUnits[i] != nil {

			if swag.IsZero(o.DenomUnits[i]) { // not required
				return nil
			}

			if err := o.DenomUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denom_units" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denom_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBodyMetadatasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBodyMetadatasItems0) UnmarshalBinary(b []byte) error {
	var res QueryDenomsMetadataOKBodyMetadatasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0 query denoms metadata o k body metadatas items0 denom units items0
swagger:model QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0
*/
type QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0 struct {

	// aliases
	Aliases []string `json:"aliases"`

	// denom
	Denom string `json:"denom,omitempty"`

	// exponent
	Exponent int64 `json:"exponent,omitempty"`
}

// Validate validates this query denoms metadata o k body metadatas items0 denom units items0
func (o *QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query denoms metadata o k body metadatas items0 denom units items0 based on context it is used
func (o *QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) UnmarshalBinary(b []byte) error {
	var res QueryDenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryDenomsMetadataOKBodyPagination query denoms metadata o k body pagination
swagger:model QueryDenomsMetadataOKBodyPagination
*/
type QueryDenomsMetadataOKBodyPagination struct {

	// next key
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this query denoms metadata o k body pagination
func (o *QueryDenomsMetadataOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query denoms metadata o k body pagination based on context it is used
func (o *QueryDenomsMetadataOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryDenomsMetadataOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res QueryDenomsMetadataOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
