// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QuerySpendableBalancesReader is a Reader for the QuerySpendableBalances structure.
type QuerySpendableBalancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QuerySpendableBalancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQuerySpendableBalancesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewQuerySpendableBalancesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQuerySpendableBalancesOK creates a QuerySpendableBalancesOK with default headers values
func NewQuerySpendableBalancesOK() *QuerySpendableBalancesOK {
	return &QuerySpendableBalancesOK{}
}

/*
QuerySpendableBalancesOK describes a response with status code 200, with default header values.

A successful response.
*/
type QuerySpendableBalancesOK struct {
	Payload *QuerySpendableBalancesOKBody
}

// IsSuccess returns true when this query spendable balances o k response has a 2xx status code
func (o *QuerySpendableBalancesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query spendable balances o k response has a 3xx status code
func (o *QuerySpendableBalancesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query spendable balances o k response has a 4xx status code
func (o *QuerySpendableBalancesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query spendable balances o k response has a 5xx status code
func (o *QuerySpendableBalancesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query spendable balances o k response a status code equal to that given
func (o *QuerySpendableBalancesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query spendable balances o k response
func (o *QuerySpendableBalancesOK) Code() int {
	return 200
}

func (o *QuerySpendableBalancesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/spendable_balances/{address}][%d] querySpendableBalancesOK %s", 200, payload)
}

func (o *QuerySpendableBalancesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/spendable_balances/{address}][%d] querySpendableBalancesOK %s", 200, payload)
}

func (o *QuerySpendableBalancesOK) GetPayload() *QuerySpendableBalancesOKBody {
	return o.Payload
}

func (o *QuerySpendableBalancesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QuerySpendableBalancesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQuerySpendableBalancesDefault creates a QuerySpendableBalancesDefault with default headers values
func NewQuerySpendableBalancesDefault(code int) *QuerySpendableBalancesDefault {
	return &QuerySpendableBalancesDefault{
		_statusCode: code,
	}
}

/*
QuerySpendableBalancesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type QuerySpendableBalancesDefault struct {
	_statusCode int

	Payload *QuerySpendableBalancesDefaultBody
}

// IsSuccess returns true when this query spendable balances default response has a 2xx status code
func (o *QuerySpendableBalancesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this query spendable balances default response has a 3xx status code
func (o *QuerySpendableBalancesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this query spendable balances default response has a 4xx status code
func (o *QuerySpendableBalancesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this query spendable balances default response has a 5xx status code
func (o *QuerySpendableBalancesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this query spendable balances default response a status code equal to that given
func (o *QuerySpendableBalancesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the query spendable balances default response
func (o *QuerySpendableBalancesDefault) Code() int {
	return o._statusCode
}

func (o *QuerySpendableBalancesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/spendable_balances/{address}][%d] Query_SpendableBalances default %s", o._statusCode, payload)
}

func (o *QuerySpendableBalancesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/spendable_balances/{address}][%d] Query_SpendableBalances default %s", o._statusCode, payload)
}

func (o *QuerySpendableBalancesDefault) GetPayload() *QuerySpendableBalancesDefaultBody {
	return o.Payload
}

func (o *QuerySpendableBalancesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QuerySpendableBalancesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
QuerySpendableBalancesDefaultBody query spendable balances default body
swagger:model QuerySpendableBalancesDefaultBody
*/
type QuerySpendableBalancesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*QuerySpendableBalancesDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this query spendable balances default body
func (o *QuerySpendableBalancesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QuerySpendableBalancesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Query_SpendableBalances default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Query_SpendableBalances default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query spendable balances default body based on the context it is used
func (o *QuerySpendableBalancesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QuerySpendableBalancesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Query_SpendableBalances default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Query_SpendableBalances default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *QuerySpendableBalancesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QuerySpendableBalancesDefaultBody) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QuerySpendableBalancesDefaultBodyDetailsItems0 query spendable balances default body details items0
swagger:model QuerySpendableBalancesDefaultBodyDetailsItems0
*/
type QuerySpendableBalancesDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// query spendable balances default body details items0
	QuerySpendableBalancesDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *QuerySpendableBalancesDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv QuerySpendableBalancesDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.QuerySpendableBalancesDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o QuerySpendableBalancesDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.QuerySpendableBalancesDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.QuerySpendableBalancesDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this query spendable balances default body details items0
func (o *QuerySpendableBalancesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query spendable balances default body details items0 based on context it is used
func (o *QuerySpendableBalancesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QuerySpendableBalancesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QuerySpendableBalancesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QuerySpendableBalancesOKBody query spendable balances o k body
swagger:model QuerySpendableBalancesOKBody
*/
type QuerySpendableBalancesOKBody struct {

	// balances
	Balances []*QuerySpendableBalancesOKBodyBalancesItems0 `json:"balances"`

	// pagination
	Pagination *QuerySpendableBalancesOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this query spendable balances o k body
func (o *QuerySpendableBalancesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBalances(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QuerySpendableBalancesOKBody) validateBalances(formats strfmt.Registry) error {
	if swag.IsZero(o.Balances) { // not required
		return nil
	}

	for i := 0; i < len(o.Balances); i++ {
		if swag.IsZero(o.Balances[i]) { // not required
			continue
		}

		if o.Balances[i] != nil {
			if err := o.Balances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("querySpendableBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("querySpendableBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *QuerySpendableBalancesOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("querySpendableBalancesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("querySpendableBalancesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this query spendable balances o k body based on the context it is used
func (o *QuerySpendableBalancesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBalances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QuerySpendableBalancesOKBody) contextValidateBalances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Balances); i++ {

		if o.Balances[i] != nil {

			if swag.IsZero(o.Balances[i]) { // not required
				return nil
			}

			if err := o.Balances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("querySpendableBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("querySpendableBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *QuerySpendableBalancesOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("querySpendableBalancesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("querySpendableBalancesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *QuerySpendableBalancesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QuerySpendableBalancesOKBody) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QuerySpendableBalancesOKBodyBalancesItems0 query spendable balances o k body balances items0
swagger:model QuerySpendableBalancesOKBodyBalancesItems0
*/
type QuerySpendableBalancesOKBodyBalancesItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this query spendable balances o k body balances items0
func (o *QuerySpendableBalancesOKBodyBalancesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query spendable balances o k body balances items0 based on context it is used
func (o *QuerySpendableBalancesOKBodyBalancesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QuerySpendableBalancesOKBodyBalancesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QuerySpendableBalancesOKBodyBalancesItems0) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesOKBodyBalancesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QuerySpendableBalancesOKBodyPagination query spendable balances o k body pagination
swagger:model QuerySpendableBalancesOKBodyPagination
*/
type QuerySpendableBalancesOKBodyPagination struct {

	// next key
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this query spendable balances o k body pagination
func (o *QuerySpendableBalancesOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query spendable balances o k body pagination based on context it is used
func (o *QuerySpendableBalancesOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QuerySpendableBalancesOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QuerySpendableBalancesOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
