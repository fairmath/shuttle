// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewQuerySpendableBalanceByDenomParams creates a new QuerySpendableBalanceByDenomParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQuerySpendableBalanceByDenomParams() *QuerySpendableBalanceByDenomParams {
	return &QuerySpendableBalanceByDenomParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQuerySpendableBalanceByDenomParamsWithTimeout creates a new QuerySpendableBalanceByDenomParams object
// with the ability to set a timeout on a request.
func NewQuerySpendableBalanceByDenomParamsWithTimeout(timeout time.Duration) *QuerySpendableBalanceByDenomParams {
	return &QuerySpendableBalanceByDenomParams{
		timeout: timeout,
	}
}

// NewQuerySpendableBalanceByDenomParamsWithContext creates a new QuerySpendableBalanceByDenomParams object
// with the ability to set a context for a request.
func NewQuerySpendableBalanceByDenomParamsWithContext(ctx context.Context) *QuerySpendableBalanceByDenomParams {
	return &QuerySpendableBalanceByDenomParams{
		Context: ctx,
	}
}

// NewQuerySpendableBalanceByDenomParamsWithHTTPClient creates a new QuerySpendableBalanceByDenomParams object
// with the ability to set a custom HTTPClient for a request.
func NewQuerySpendableBalanceByDenomParamsWithHTTPClient(client *http.Client) *QuerySpendableBalanceByDenomParams {
	return &QuerySpendableBalanceByDenomParams{
		HTTPClient: client,
	}
}

/*
QuerySpendableBalanceByDenomParams contains all the parameters to send to the API endpoint

	for the query spendable balance by denom operation.

	Typically these are written to a http.Request.
*/
type QuerySpendableBalanceByDenomParams struct {

	/* Address.

	   address is the address to query balances for.
	*/
	Address string

	// Denom.
	Denom *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query spendable balance by denom params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QuerySpendableBalanceByDenomParams) WithDefaults() *QuerySpendableBalanceByDenomParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query spendable balance by denom params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QuerySpendableBalanceByDenomParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) WithTimeout(timeout time.Duration) *QuerySpendableBalanceByDenomParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) WithContext(ctx context.Context) *QuerySpendableBalanceByDenomParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) WithHTTPClient(client *http.Client) *QuerySpendableBalanceByDenomParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) WithAddress(address string) *QuerySpendableBalanceByDenomParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) SetAddress(address string) {
	o.Address = address
}

// WithDenom adds the denom to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) WithDenom(denom *string) *QuerySpendableBalanceByDenomParams {
	o.SetDenom(denom)
	return o
}

// SetDenom adds the denom to the query spendable balance by denom params
func (o *QuerySpendableBalanceByDenomParams) SetDenom(denom *string) {
	o.Denom = denom
}

// WriteToRequest writes these params to a swagger request
func (o *QuerySpendableBalanceByDenomParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	if o.Denom != nil {

		// query param denom
		var qrDenom string

		if o.Denom != nil {
			qrDenom = *o.Denom
		}
		qDenom := qrDenom
		if qDenom != "" {

			if err := r.SetQueryParam("denom", qDenom); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
