// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QueryDenomMetadataResponse query denom metadata response
//
// swagger:model QueryDenomMetadataResponse
type QueryDenomMetadataResponse struct {

	// metadata
	Metadata *QueryDenomMetadataResponseMetadata `json:"metadata,omitempty"`
}

// Validate validates this query denom metadata response
func (m *QueryDenomMetadataResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryDenomMetadataResponse) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this query denom metadata response based on the context it is used
func (m *QueryDenomMetadataResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryDenomMetadataResponse) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryDenomMetadataResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryDenomMetadataResponse) UnmarshalBinary(b []byte) error {
	var res QueryDenomMetadataResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QueryDenomMetadataResponseMetadata query denom metadata response metadata
//
// swagger:model QueryDenomMetadataResponseMetadata
type QueryDenomMetadataResponseMetadata struct {

	// base
	Base string `json:"base,omitempty"`

	// denom units
	DenomUnits []*QueryDenomMetadataResponseMetadataDenomUnitsItems0 `json:"denom_units"`

	// description
	Description string `json:"description,omitempty"`

	// display
	Display string `json:"display,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// symbol
	Symbol string `json:"symbol,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`

	// uri hash
	URIHash string `json:"uri_hash,omitempty"`
}

// Validate validates this query denom metadata response metadata
func (m *QueryDenomMetadataResponseMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDenomUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryDenomMetadataResponseMetadata) validateDenomUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.DenomUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.DenomUnits); i++ {
		if swag.IsZero(m.DenomUnits[i]) { // not required
			continue
		}

		if m.DenomUnits[i] != nil {
			if err := m.DenomUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + "denom_units" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadata" + "." + "denom_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query denom metadata response metadata based on the context it is used
func (m *QueryDenomMetadataResponseMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDenomUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryDenomMetadataResponseMetadata) contextValidateDenomUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DenomUnits); i++ {

		if m.DenomUnits[i] != nil {

			if swag.IsZero(m.DenomUnits[i]) { // not required
				return nil
			}

			if err := m.DenomUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + "denom_units" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadata" + "." + "denom_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryDenomMetadataResponseMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryDenomMetadataResponseMetadata) UnmarshalBinary(b []byte) error {
	var res QueryDenomMetadataResponseMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QueryDenomMetadataResponseMetadataDenomUnitsItems0 query denom metadata response metadata denom units items0
//
// swagger:model QueryDenomMetadataResponseMetadataDenomUnitsItems0
type QueryDenomMetadataResponseMetadataDenomUnitsItems0 struct {

	// aliases
	Aliases []string `json:"aliases"`

	// denom
	Denom string `json:"denom,omitempty"`

	// exponent
	Exponent int64 `json:"exponent,omitempty"`
}

// Validate validates this query denom metadata response metadata denom units items0
func (m *QueryDenomMetadataResponseMetadataDenomUnitsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query denom metadata response metadata denom units items0 based on context it is used
func (m *QueryDenomMetadataResponseMetadataDenomUnitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueryDenomMetadataResponseMetadataDenomUnitsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryDenomMetadataResponseMetadataDenomUnitsItems0) UnmarshalBinary(b []byte) error {
	var res QueryDenomMetadataResponseMetadataDenomUnitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
