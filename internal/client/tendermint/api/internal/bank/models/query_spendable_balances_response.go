// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QuerySpendableBalancesResponse query spendable balances response
//
// swagger:model QuerySpendableBalancesResponse
type QuerySpendableBalancesResponse struct {

	// balances
	Balances []*QuerySpendableBalancesResponseBalancesItems0 `json:"balances"`

	// pagination
	Pagination *QuerySpendableBalancesResponsePagination `json:"pagination,omitempty"`
}

// Validate validates this query spendable balances response
func (m *QuerySpendableBalancesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuerySpendableBalancesResponse) validateBalances(formats strfmt.Registry) error {
	if swag.IsZero(m.Balances) { // not required
		return nil
	}

	for i := 0; i < len(m.Balances); i++ {
		if swag.IsZero(m.Balances[i]) { // not required
			continue
		}

		if m.Balances[i] != nil {
			if err := m.Balances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuerySpendableBalancesResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this query spendable balances response based on the context it is used
func (m *QuerySpendableBalancesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuerySpendableBalancesResponse) contextValidateBalances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Balances); i++ {

		if m.Balances[i] != nil {

			if swag.IsZero(m.Balances[i]) { // not required
				return nil
			}

			if err := m.Balances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuerySpendableBalancesResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {

		if swag.IsZero(m.Pagination) { // not required
			return nil
		}

		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuerySpendableBalancesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuerySpendableBalancesResponse) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QuerySpendableBalancesResponseBalancesItems0 query spendable balances response balances items0
//
// swagger:model QuerySpendableBalancesResponseBalancesItems0
type QuerySpendableBalancesResponseBalancesItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this query spendable balances response balances items0
func (m *QuerySpendableBalancesResponseBalancesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query spendable balances response balances items0 based on context it is used
func (m *QuerySpendableBalancesResponseBalancesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QuerySpendableBalancesResponseBalancesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuerySpendableBalancesResponseBalancesItems0) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesResponseBalancesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QuerySpendableBalancesResponsePagination query spendable balances response pagination
//
// swagger:model QuerySpendableBalancesResponsePagination
type QuerySpendableBalancesResponsePagination struct {

	// next key
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this query spendable balances response pagination
func (m *QuerySpendableBalancesResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query spendable balances response pagination based on context it is used
func (m *QuerySpendableBalancesResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QuerySpendableBalancesResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuerySpendableBalancesResponsePagination) UnmarshalBinary(b []byte) error {
	var res QuerySpendableBalancesResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
