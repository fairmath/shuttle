// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServiceBroadcastTx(params *ServiceBroadcastTxParams, opts ...ClientOption) (*ServiceBroadcastTxOK, error)

	ServiceGetBlockWithTxs(params *ServiceGetBlockWithTxsParams, opts ...ClientOption) (*ServiceGetBlockWithTxsOK, error)

	ServiceGetTx(params *ServiceGetTxParams, opts ...ClientOption) (*ServiceGetTxOK, error)

	ServiceGetTxsEvent(params *ServiceGetTxsEventParams, opts ...ClientOption) (*ServiceGetTxsEventOK, error)

	ServiceSimulate(params *ServiceSimulateParams, opts ...ClientOption) (*ServiceSimulateOK, error)

	ServiceTxDecode(params *ServiceTxDecodeParams, opts ...ClientOption) (*ServiceTxDecodeOK, error)

	ServiceTxDecodeAmino(params *ServiceTxDecodeAminoParams, opts ...ClientOption) (*ServiceTxDecodeAminoOK, error)

	ServiceTxEncode(params *ServiceTxEncodeParams, opts ...ClientOption) (*ServiceTxEncodeOK, error)

	ServiceTxEncodeAmino(params *ServiceTxEncodeAminoParams, opts ...ClientOption) (*ServiceTxEncodeAminoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ServiceBroadcastTx service broadcast tx API
*/
func (a *Client) ServiceBroadcastTx(params *ServiceBroadcastTxParams, opts ...ClientOption) (*ServiceBroadcastTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceBroadcastTxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_BroadcastTx",
		Method:             "POST",
		PathPattern:        "/cosmos/tx/v1beta1/txs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceBroadcastTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceBroadcastTxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceBroadcastTxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetBlockWithTxs service get block with txs API
*/
func (a *Client) ServiceGetBlockWithTxs(params *ServiceGetBlockWithTxsParams, opts ...ClientOption) (*ServiceGetBlockWithTxsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetBlockWithTxsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetBlockWithTxs",
		Method:             "GET",
		PathPattern:        "/cosmos/tx/v1beta1/txs/block/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetBlockWithTxsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetBlockWithTxsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetBlockWithTxsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetTx service get tx API
*/
func (a *Client) ServiceGetTx(params *ServiceGetTxParams, opts ...ClientOption) (*ServiceGetTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetTxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetTx",
		Method:             "GET",
		PathPattern:        "/cosmos/tx/v1beta1/txs/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetTxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetTxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetTxsEvent service get txs event API
*/
func (a *Client) ServiceGetTxsEvent(params *ServiceGetTxsEventParams, opts ...ClientOption) (*ServiceGetTxsEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetTxsEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetTxsEvent",
		Method:             "GET",
		PathPattern:        "/cosmos/tx/v1beta1/txs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetTxsEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetTxsEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetTxsEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceSimulate service simulate API
*/
func (a *Client) ServiceSimulate(params *ServiceSimulateParams, opts ...ClientOption) (*ServiceSimulateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceSimulateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_Simulate",
		Method:             "POST",
		PathPattern:        "/cosmos/tx/v1beta1/simulate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceSimulateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceSimulateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceSimulateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceTxDecode service tx decode API
*/
func (a *Client) ServiceTxDecode(params *ServiceTxDecodeParams, opts ...ClientOption) (*ServiceTxDecodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTxDecodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_TxDecode",
		Method:             "POST",
		PathPattern:        "/cosmos/tx/v1beta1/decode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceTxDecodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceTxDecodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceTxDecodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceTxDecodeAmino service tx decode amino API
*/
func (a *Client) ServiceTxDecodeAmino(params *ServiceTxDecodeAminoParams, opts ...ClientOption) (*ServiceTxDecodeAminoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTxDecodeAminoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_TxDecodeAmino",
		Method:             "POST",
		PathPattern:        "/cosmos/tx/v1beta1/decode/amino",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceTxDecodeAminoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceTxDecodeAminoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceTxDecodeAminoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceTxEncode service tx encode API
*/
func (a *Client) ServiceTxEncode(params *ServiceTxEncodeParams, opts ...ClientOption) (*ServiceTxEncodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTxEncodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_TxEncode",
		Method:             "POST",
		PathPattern:        "/cosmos/tx/v1beta1/encode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceTxEncodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceTxEncodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceTxEncodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceTxEncodeAmino service tx encode amino API
*/
func (a *Client) ServiceTxEncodeAmino(params *ServiceTxEncodeAminoParams, opts ...ClientOption) (*ServiceTxEncodeAminoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTxEncodeAminoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_TxEncodeAmino",
		Method:             "POST",
		PathPattern:        "/cosmos/tx/v1beta1/encode/amino",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceTxEncodeAminoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceTxEncodeAminoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceTxEncodeAminoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
