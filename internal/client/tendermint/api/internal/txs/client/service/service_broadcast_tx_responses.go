// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceBroadcastTxReader is a Reader for the ServiceBroadcastTx structure.
type ServiceBroadcastTxReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceBroadcastTxReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceBroadcastTxOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServiceBroadcastTxDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServiceBroadcastTxOK creates a ServiceBroadcastTxOK with default headers values
func NewServiceBroadcastTxOK() *ServiceBroadcastTxOK {
	return &ServiceBroadcastTxOK{}
}

/*
ServiceBroadcastTxOK describes a response with status code 200, with default header values.

A successful response.
*/
type ServiceBroadcastTxOK struct {
	Payload *ServiceBroadcastTxOKBody
}

// IsSuccess returns true when this service broadcast tx o k response has a 2xx status code
func (o *ServiceBroadcastTxOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this service broadcast tx o k response has a 3xx status code
func (o *ServiceBroadcastTxOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service broadcast tx o k response has a 4xx status code
func (o *ServiceBroadcastTxOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this service broadcast tx o k response has a 5xx status code
func (o *ServiceBroadcastTxOK) IsServerError() bool {
	return false
}

// IsCode returns true when this service broadcast tx o k response a status code equal to that given
func (o *ServiceBroadcastTxOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the service broadcast tx o k response
func (o *ServiceBroadcastTxOK) Code() int {
	return 200
}

func (o *ServiceBroadcastTxOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/txs][%d] serviceBroadcastTxOK %s", 200, payload)
}

func (o *ServiceBroadcastTxOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/txs][%d] serviceBroadcastTxOK %s", 200, payload)
}

func (o *ServiceBroadcastTxOK) GetPayload() *ServiceBroadcastTxOKBody {
	return o.Payload
}

func (o *ServiceBroadcastTxOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServiceBroadcastTxOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceBroadcastTxDefault creates a ServiceBroadcastTxDefault with default headers values
func NewServiceBroadcastTxDefault(code int) *ServiceBroadcastTxDefault {
	return &ServiceBroadcastTxDefault{
		_statusCode: code,
	}
}

/*
ServiceBroadcastTxDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ServiceBroadcastTxDefault struct {
	_statusCode int

	Payload *ServiceBroadcastTxDefaultBody
}

// IsSuccess returns true when this service broadcast tx default response has a 2xx status code
func (o *ServiceBroadcastTxDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this service broadcast tx default response has a 3xx status code
func (o *ServiceBroadcastTxDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this service broadcast tx default response has a 4xx status code
func (o *ServiceBroadcastTxDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this service broadcast tx default response has a 5xx status code
func (o *ServiceBroadcastTxDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this service broadcast tx default response a status code equal to that given
func (o *ServiceBroadcastTxDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the service broadcast tx default response
func (o *ServiceBroadcastTxDefault) Code() int {
	return o._statusCode
}

func (o *ServiceBroadcastTxDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/txs][%d] Service_BroadcastTx default %s", o._statusCode, payload)
}

func (o *ServiceBroadcastTxDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/txs][%d] Service_BroadcastTx default %s", o._statusCode, payload)
}

func (o *ServiceBroadcastTxDefault) GetPayload() *ServiceBroadcastTxDefaultBody {
	return o.Payload
}

func (o *ServiceBroadcastTxDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServiceBroadcastTxDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ServiceBroadcastTxBody service broadcast tx body
swagger:model ServiceBroadcastTxBody
*/
type ServiceBroadcastTxBody struct {

	// mode
	// Enum: ["BROADCAST_MODE_UNSPECIFIED","BROADCAST_MODE_BLOCK","BROADCAST_MODE_SYNC","BROADCAST_MODE_ASYNC"]
	Mode *string `json:"mode,omitempty"`

	// tx bytes
	// Format: byte
	TxBytes strfmt.Base64 `json:"tx_bytes,omitempty"`
}

// Validate validates this service broadcast tx body
func (o *ServiceBroadcastTxBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceBroadcastTxBodyTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BROADCAST_MODE_UNSPECIFIED","BROADCAST_MODE_BLOCK","BROADCAST_MODE_SYNC","BROADCAST_MODE_ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceBroadcastTxBodyTypeModePropEnum = append(serviceBroadcastTxBodyTypeModePropEnum, v)
	}
}

const (

	// ServiceBroadcastTxBodyModeBROADCASTMODEUNSPECIFIED captures enum value "BROADCAST_MODE_UNSPECIFIED"
	ServiceBroadcastTxBodyModeBROADCASTMODEUNSPECIFIED string = "BROADCAST_MODE_UNSPECIFIED"

	// ServiceBroadcastTxBodyModeBROADCASTMODEBLOCK captures enum value "BROADCAST_MODE_BLOCK"
	ServiceBroadcastTxBodyModeBROADCASTMODEBLOCK string = "BROADCAST_MODE_BLOCK"

	// ServiceBroadcastTxBodyModeBROADCASTMODESYNC captures enum value "BROADCAST_MODE_SYNC"
	ServiceBroadcastTxBodyModeBROADCASTMODESYNC string = "BROADCAST_MODE_SYNC"

	// ServiceBroadcastTxBodyModeBROADCASTMODEASYNC captures enum value "BROADCAST_MODE_ASYNC"
	ServiceBroadcastTxBodyModeBROADCASTMODEASYNC string = "BROADCAST_MODE_ASYNC"
)

// prop value enum
func (o *ServiceBroadcastTxBody) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceBroadcastTxBodyTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ServiceBroadcastTxBody) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(o.Mode) { // not required
		return nil
	}

	// value enum
	if err := o.validateModeEnum("body"+"."+"mode", "body", *o.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service broadcast tx body based on context it is used
func (o *ServiceBroadcastTxBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxBody) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxDefaultBody service broadcast tx default body
swagger:model ServiceBroadcastTxDefaultBody
*/
type ServiceBroadcastTxDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ServiceBroadcastTxDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this service broadcast tx default body
func (o *ServiceBroadcastTxDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service_BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service_BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service broadcast tx default body based on the context it is used
func (o *ServiceBroadcastTxDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service_BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service_BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxDefaultBodyDetailsItems0 service broadcast tx default body details items0
swagger:model ServiceBroadcastTxDefaultBodyDetailsItems0
*/
type ServiceBroadcastTxDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// service broadcast tx default body details items0
	ServiceBroadcastTxDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *ServiceBroadcastTxDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ServiceBroadcastTxDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.ServiceBroadcastTxDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o ServiceBroadcastTxDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.ServiceBroadcastTxDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.ServiceBroadcastTxDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this service broadcast tx default body details items0
func (o *ServiceBroadcastTxDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service broadcast tx default body details items0 based on context it is used
func (o *ServiceBroadcastTxDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBody service broadcast tx o k body
swagger:model ServiceBroadcastTxOKBody
*/
type ServiceBroadcastTxOKBody struct {

	// tx response
	TxResponse *ServiceBroadcastTxOKBodyTxResponse `json:"tx_response,omitempty"`
}

// Validate validates this service broadcast tx o k body
func (o *ServiceBroadcastTxOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTxResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBody) validateTxResponse(formats strfmt.Registry) error {
	if swag.IsZero(o.TxResponse) { // not required
		return nil
	}

	if o.TxResponse != nil {
		if err := o.TxResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service broadcast tx o k body based on the context it is used
func (o *ServiceBroadcastTxOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTxResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBody) contextValidateTxResponse(ctx context.Context, formats strfmt.Registry) error {

	if o.TxResponse != nil {

		if swag.IsZero(o.TxResponse) { // not required
			return nil
		}

		if err := o.TxResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBody) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBodyTxResponse service broadcast tx o k body tx response
swagger:model ServiceBroadcastTxOKBodyTxResponse
*/
type ServiceBroadcastTxOKBodyTxResponse struct {

	// code
	Code int64 `json:"code,omitempty"`

	// codespace
	Codespace string `json:"codespace,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// events
	Events []*ServiceBroadcastTxOKBodyTxResponseEventsItems0 `json:"events"`

	// gas used
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted string `json:"gas_wanted,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// logs
	Logs []*ServiceBroadcastTxOKBodyTxResponseLogsItems0 `json:"logs"`

	// raw log
	RawLog string `json:"raw_log,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`

	// tx
	Tx *ServiceBroadcastTxOKBodyTxResponseTx `json:"tx,omitempty"`

	// txhash
	Txhash string `json:"txhash,omitempty"`
}

// Validate validates this service broadcast tx o k body tx response
func (o *ServiceBroadcastTxOKBodyTxResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponse) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(o.Events) { // not required
		return nil
	}

	for i := 0; i < len(o.Events); i++ {
		if swag.IsZero(o.Events[i]) { // not required
			continue
		}

		if o.Events[i] != nil {
			if err := o.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponse) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(o.Logs) { // not required
		return nil
	}

	for i := 0; i < len(o.Logs); i++ {
		if swag.IsZero(o.Logs[i]) { // not required
			continue
		}

		if o.Logs[i] != nil {
			if err := o.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponse) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(o.Tx) { // not required
		return nil
	}

	if o.Tx != nil {
		if err := o.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service broadcast tx o k body tx response based on the context it is used
func (o *ServiceBroadcastTxOKBodyTxResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponse) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Events); i++ {

		if o.Events[i] != nil {

			if swag.IsZero(o.Events[i]) { // not required
				return nil
			}

			if err := o.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponse) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Logs); i++ {

		if o.Logs[i] != nil {

			if swag.IsZero(o.Logs[i]) { // not required
				return nil
			}

			if err := o.Logs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponse) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if o.Tx != nil {

		if swag.IsZero(o.Tx) { // not required
			return nil
		}

		if err := o.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceBroadcastTxOK" + "." + "tx_response" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponse) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponse) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBodyTxResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBodyTxResponseEventsItems0 service broadcast tx o k body tx response events items0
swagger:model ServiceBroadcastTxOKBodyTxResponseEventsItems0
*/
type ServiceBroadcastTxOKBodyTxResponseEventsItems0 struct {

	// attributes
	Attributes []*ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this service broadcast tx o k body tx response events items0
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(o.Attributes); i++ {
		if swag.IsZero(o.Attributes[i]) { // not required
			continue
		}

		if o.Attributes[i] != nil {
			if err := o.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service broadcast tx o k body tx response events items0 based on the context it is used
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Attributes); i++ {

		if o.Attributes[i] != nil {

			if swag.IsZero(o.Attributes[i]) { // not required
				return nil
			}

			if err := o.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBodyTxResponseEventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0 service broadcast tx o k body tx response events items0 attributes items0
swagger:model ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0
*/
type ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0 struct {

	// index
	Index bool `json:"index,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this service broadcast tx o k body tx response events items0 attributes items0
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service broadcast tx o k body tx response events items0 attributes items0 based on context it is used
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBodyTxResponseEventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBodyTxResponseLogsItems0 service broadcast tx o k body tx response logs items0
swagger:model ServiceBroadcastTxOKBodyTxResponseLogsItems0
*/
type ServiceBroadcastTxOKBodyTxResponseLogsItems0 struct {

	// events
	Events []*ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0 `json:"events"`

	// log
	Log string `json:"log,omitempty"`

	// msg index
	MsgIndex int64 `json:"msg_index,omitempty"`
}

// Validate validates this service broadcast tx o k body tx response logs items0
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(o.Events) { // not required
		return nil
	}

	for i := 0; i < len(o.Events); i++ {
		if swag.IsZero(o.Events[i]) { // not required
			continue
		}

		if o.Events[i] != nil {
			if err := o.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service broadcast tx o k body tx response logs items0 based on the context it is used
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Events); i++ {

		if o.Events[i] != nil {

			if swag.IsZero(o.Events[i]) { // not required
				return nil
			}

			if err := o.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBodyTxResponseLogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0 service broadcast tx o k body tx response logs items0 events items0
swagger:model ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0
*/
type ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0 struct {

	// attributes
	Attributes []*ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this service broadcast tx o k body tx response logs items0 events items0
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(o.Attributes); i++ {
		if swag.IsZero(o.Attributes[i]) { // not required
			continue
		}

		if o.Attributes[i] != nil {
			if err := o.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service broadcast tx o k body tx response logs items0 events items0 based on the context it is used
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Attributes); i++ {

		if o.Attributes[i] != nil {

			if swag.IsZero(o.Attributes[i]) { // not required
				return nil
			}

			if err := o.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0 service broadcast tx o k body tx response logs items0 events items0 attributes items0
swagger:model ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0
*/
type ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this service broadcast tx o k body tx response logs items0 events items0 attributes items0
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service broadcast tx o k body tx response logs items0 events items0 attributes items0 based on context it is used
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceBroadcastTxOKBodyTxResponseTx service broadcast tx o k body tx response tx
swagger:model ServiceBroadcastTxOKBodyTxResponseTx
*/
type ServiceBroadcastTxOKBodyTxResponseTx struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// service broadcast tx o k body tx response tx
	ServiceBroadcastTxOKBodyTxResponseTx map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *ServiceBroadcastTxOKBodyTxResponseTx) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ServiceBroadcastTxOKBodyTxResponseTx

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.ServiceBroadcastTxOKBodyTxResponseTx = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o ServiceBroadcastTxOKBodyTxResponseTx) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.ServiceBroadcastTxOKBodyTxResponseTx) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.ServiceBroadcastTxOKBodyTxResponseTx)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this service broadcast tx o k body tx response tx
func (o *ServiceBroadcastTxOKBodyTxResponseTx) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service broadcast tx o k body tx response tx based on context it is used
func (o *ServiceBroadcastTxOKBodyTxResponseTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseTx) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBroadcastTxOKBodyTxResponseTx) UnmarshalBinary(b []byte) error {
	var res ServiceBroadcastTxOKBodyTxResponseTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
