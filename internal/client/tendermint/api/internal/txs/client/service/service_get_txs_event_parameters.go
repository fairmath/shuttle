// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewServiceGetTxsEventParams creates a new ServiceGetTxsEventParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServiceGetTxsEventParams() *ServiceGetTxsEventParams {
	return &ServiceGetTxsEventParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServiceGetTxsEventParamsWithTimeout creates a new ServiceGetTxsEventParams object
// with the ability to set a timeout on a request.
func NewServiceGetTxsEventParamsWithTimeout(timeout time.Duration) *ServiceGetTxsEventParams {
	return &ServiceGetTxsEventParams{
		timeout: timeout,
	}
}

// NewServiceGetTxsEventParamsWithContext creates a new ServiceGetTxsEventParams object
// with the ability to set a context for a request.
func NewServiceGetTxsEventParamsWithContext(ctx context.Context) *ServiceGetTxsEventParams {
	return &ServiceGetTxsEventParams{
		Context: ctx,
	}
}

// NewServiceGetTxsEventParamsWithHTTPClient creates a new ServiceGetTxsEventParams object
// with the ability to set a custom HTTPClient for a request.
func NewServiceGetTxsEventParamsWithHTTPClient(client *http.Client) *ServiceGetTxsEventParams {
	return &ServiceGetTxsEventParams{
		HTTPClient: client,
	}
}

/*
ServiceGetTxsEventParams contains all the parameters to send to the API endpoint

	for the service get txs event operation.

	Typically these are written to a http.Request.
*/
type ServiceGetTxsEventParams struct {

	// Events.
	Events []string

	// Limit.
	//
	// Format: uint64
	Limit *string

	/* OrderBy.

	      - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults
	to ASC in this case.
	 - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
	 - ORDER_BY_DESC: ORDER_BY_DESC defines descending order

	     Default: "ORDER_BY_UNSPECIFIED"
	*/
	OrderBy *string

	// Page.
	//
	// Format: uint64
	Page *string

	// PaginationCountTotal.
	PaginationCountTotal *bool

	// PaginationKey.
	//
	// Format: byte
	PaginationKey *strfmt.Base64

	// PaginationLimit.
	//
	// Format: uint64
	PaginationLimit *string

	// PaginationOffset.
	//
	// Format: uint64
	PaginationOffset *string

	// PaginationReverse.
	PaginationReverse *bool

	// Query.
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the service get txs event params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServiceGetTxsEventParams) WithDefaults() *ServiceGetTxsEventParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the service get txs event params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServiceGetTxsEventParams) SetDefaults() {
	var (
		orderByDefault = string("ORDER_BY_UNSPECIFIED")
	)

	val := ServiceGetTxsEventParams{
		OrderBy: &orderByDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the service get txs event params
func (o *ServiceGetTxsEventParams) WithTimeout(timeout time.Duration) *ServiceGetTxsEventParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the service get txs event params
func (o *ServiceGetTxsEventParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the service get txs event params
func (o *ServiceGetTxsEventParams) WithContext(ctx context.Context) *ServiceGetTxsEventParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the service get txs event params
func (o *ServiceGetTxsEventParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the service get txs event params
func (o *ServiceGetTxsEventParams) WithHTTPClient(client *http.Client) *ServiceGetTxsEventParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the service get txs event params
func (o *ServiceGetTxsEventParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEvents adds the events to the service get txs event params
func (o *ServiceGetTxsEventParams) WithEvents(events []string) *ServiceGetTxsEventParams {
	o.SetEvents(events)
	return o
}

// SetEvents adds the events to the service get txs event params
func (o *ServiceGetTxsEventParams) SetEvents(events []string) {
	o.Events = events
}

// WithLimit adds the limit to the service get txs event params
func (o *ServiceGetTxsEventParams) WithLimit(limit *string) *ServiceGetTxsEventParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the service get txs event params
func (o *ServiceGetTxsEventParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOrderBy adds the orderBy to the service get txs event params
func (o *ServiceGetTxsEventParams) WithOrderBy(orderBy *string) *ServiceGetTxsEventParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the service get txs event params
func (o *ServiceGetTxsEventParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the service get txs event params
func (o *ServiceGetTxsEventParams) WithPage(page *string) *ServiceGetTxsEventParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the service get txs event params
func (o *ServiceGetTxsEventParams) SetPage(page *string) {
	o.Page = page
}

// WithPaginationCountTotal adds the paginationCountTotal to the service get txs event params
func (o *ServiceGetTxsEventParams) WithPaginationCountTotal(paginationCountTotal *bool) *ServiceGetTxsEventParams {
	o.SetPaginationCountTotal(paginationCountTotal)
	return o
}

// SetPaginationCountTotal adds the paginationCountTotal to the service get txs event params
func (o *ServiceGetTxsEventParams) SetPaginationCountTotal(paginationCountTotal *bool) {
	o.PaginationCountTotal = paginationCountTotal
}

// WithPaginationKey adds the paginationKey to the service get txs event params
func (o *ServiceGetTxsEventParams) WithPaginationKey(paginationKey *strfmt.Base64) *ServiceGetTxsEventParams {
	o.SetPaginationKey(paginationKey)
	return o
}

// SetPaginationKey adds the paginationKey to the service get txs event params
func (o *ServiceGetTxsEventParams) SetPaginationKey(paginationKey *strfmt.Base64) {
	o.PaginationKey = paginationKey
}

// WithPaginationLimit adds the paginationLimit to the service get txs event params
func (o *ServiceGetTxsEventParams) WithPaginationLimit(paginationLimit *string) *ServiceGetTxsEventParams {
	o.SetPaginationLimit(paginationLimit)
	return o
}

// SetPaginationLimit adds the paginationLimit to the service get txs event params
func (o *ServiceGetTxsEventParams) SetPaginationLimit(paginationLimit *string) {
	o.PaginationLimit = paginationLimit
}

// WithPaginationOffset adds the paginationOffset to the service get txs event params
func (o *ServiceGetTxsEventParams) WithPaginationOffset(paginationOffset *string) *ServiceGetTxsEventParams {
	o.SetPaginationOffset(paginationOffset)
	return o
}

// SetPaginationOffset adds the paginationOffset to the service get txs event params
func (o *ServiceGetTxsEventParams) SetPaginationOffset(paginationOffset *string) {
	o.PaginationOffset = paginationOffset
}

// WithPaginationReverse adds the paginationReverse to the service get txs event params
func (o *ServiceGetTxsEventParams) WithPaginationReverse(paginationReverse *bool) *ServiceGetTxsEventParams {
	o.SetPaginationReverse(paginationReverse)
	return o
}

// SetPaginationReverse adds the paginationReverse to the service get txs event params
func (o *ServiceGetTxsEventParams) SetPaginationReverse(paginationReverse *bool) {
	o.PaginationReverse = paginationReverse
}

// WithQuery adds the query to the service get txs event params
func (o *ServiceGetTxsEventParams) WithQuery(query *string) *ServiceGetTxsEventParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the service get txs event params
func (o *ServiceGetTxsEventParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *ServiceGetTxsEventParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Events != nil {

		// binding items for events
		joinedEvents := o.bindParamEvents(reg)

		// query array param events
		if err := r.SetQueryParam("events", joinedEvents...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PaginationCountTotal != nil {

		// query param pagination.count_total
		var qrPaginationCountTotal bool

		if o.PaginationCountTotal != nil {
			qrPaginationCountTotal = *o.PaginationCountTotal
		}
		qPaginationCountTotal := swag.FormatBool(qrPaginationCountTotal)
		if qPaginationCountTotal != "" {

			if err := r.SetQueryParam("pagination.count_total", qPaginationCountTotal); err != nil {
				return err
			}
		}
	}

	if o.PaginationKey != nil {

		// query param pagination.key
		var qrPaginationKey strfmt.Base64

		if o.PaginationKey != nil {
			qrPaginationKey = *o.PaginationKey
		}
		qPaginationKey := qrPaginationKey.String()
		if qPaginationKey != "" {

			if err := r.SetQueryParam("pagination.key", qPaginationKey); err != nil {
				return err
			}
		}
	}

	if o.PaginationLimit != nil {

		// query param pagination.limit
		var qrPaginationLimit string

		if o.PaginationLimit != nil {
			qrPaginationLimit = *o.PaginationLimit
		}
		qPaginationLimit := qrPaginationLimit
		if qPaginationLimit != "" {

			if err := r.SetQueryParam("pagination.limit", qPaginationLimit); err != nil {
				return err
			}
		}
	}

	if o.PaginationOffset != nil {

		// query param pagination.offset
		var qrPaginationOffset string

		if o.PaginationOffset != nil {
			qrPaginationOffset = *o.PaginationOffset
		}
		qPaginationOffset := qrPaginationOffset
		if qPaginationOffset != "" {

			if err := r.SetQueryParam("pagination.offset", qPaginationOffset); err != nil {
				return err
			}
		}
	}

	if o.PaginationReverse != nil {

		// query param pagination.reverse
		var qrPaginationReverse bool

		if o.PaginationReverse != nil {
			qrPaginationReverse = *o.PaginationReverse
		}
		qPaginationReverse := swag.FormatBool(qrPaginationReverse)
		if qPaginationReverse != "" {

			if err := r.SetQueryParam("pagination.reverse", qPaginationReverse); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamServiceGetTxsEvent binds the parameter events
func (o *ServiceGetTxsEventParams) bindParamEvents(formats strfmt.Registry) []string {
	eventsIR := o.Events

	var eventsIC []string
	for _, eventsIIR := range eventsIR { // explode []string

		eventsIIV := eventsIIR // string as string
		eventsIC = append(eventsIC, eventsIIV)
	}

	// items.CollectionFormat: "multi"
	eventsIS := swag.JoinByFormat(eventsIC, "multi")

	return eventsIS
}
