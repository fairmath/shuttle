// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceSimulateReader is a Reader for the ServiceSimulate structure.
type ServiceSimulateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceSimulateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceSimulateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServiceSimulateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServiceSimulateOK creates a ServiceSimulateOK with default headers values
func NewServiceSimulateOK() *ServiceSimulateOK {
	return &ServiceSimulateOK{}
}

/*
ServiceSimulateOK describes a response with status code 200, with default header values.

A successful response.
*/
type ServiceSimulateOK struct {
	Payload *ServiceSimulateOKBody
}

// IsSuccess returns true when this service simulate o k response has a 2xx status code
func (o *ServiceSimulateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this service simulate o k response has a 3xx status code
func (o *ServiceSimulateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service simulate o k response has a 4xx status code
func (o *ServiceSimulateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this service simulate o k response has a 5xx status code
func (o *ServiceSimulateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this service simulate o k response a status code equal to that given
func (o *ServiceSimulateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the service simulate o k response
func (o *ServiceSimulateOK) Code() int {
	return 200
}

func (o *ServiceSimulateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/simulate][%d] serviceSimulateOK %s", 200, payload)
}

func (o *ServiceSimulateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/simulate][%d] serviceSimulateOK %s", 200, payload)
}

func (o *ServiceSimulateOK) GetPayload() *ServiceSimulateOKBody {
	return o.Payload
}

func (o *ServiceSimulateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServiceSimulateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceSimulateDefault creates a ServiceSimulateDefault with default headers values
func NewServiceSimulateDefault(code int) *ServiceSimulateDefault {
	return &ServiceSimulateDefault{
		_statusCode: code,
	}
}

/*
ServiceSimulateDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ServiceSimulateDefault struct {
	_statusCode int

	Payload *ServiceSimulateDefaultBody
}

// IsSuccess returns true when this service simulate default response has a 2xx status code
func (o *ServiceSimulateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this service simulate default response has a 3xx status code
func (o *ServiceSimulateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this service simulate default response has a 4xx status code
func (o *ServiceSimulateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this service simulate default response has a 5xx status code
func (o *ServiceSimulateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this service simulate default response a status code equal to that given
func (o *ServiceSimulateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the service simulate default response
func (o *ServiceSimulateDefault) Code() int {
	return o._statusCode
}

func (o *ServiceSimulateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/simulate][%d] Service_Simulate default %s", o._statusCode, payload)
}

func (o *ServiceSimulateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/simulate][%d] Service_Simulate default %s", o._statusCode, payload)
}

func (o *ServiceSimulateDefault) GetPayload() *ServiceSimulateDefaultBody {
	return o.Payload
}

func (o *ServiceSimulateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServiceSimulateDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ServiceSimulateDefaultBody service simulate default body
swagger:model ServiceSimulateDefaultBody
*/
type ServiceSimulateDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ServiceSimulateDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this service simulate default body
func (o *ServiceSimulateDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service_Simulate default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service_Simulate default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service simulate default body based on the context it is used
func (o *ServiceSimulateDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service_Simulate default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service_Simulate default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceSimulateDefaultBodyDetailsItems0 service simulate default body details items0
swagger:model ServiceSimulateDefaultBodyDetailsItems0
*/
type ServiceSimulateDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// service simulate default body details items0
	ServiceSimulateDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *ServiceSimulateDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ServiceSimulateDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.ServiceSimulateDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o ServiceSimulateDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.ServiceSimulateDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.ServiceSimulateDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this service simulate default body details items0
func (o *ServiceSimulateDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service simulate default body details items0 based on context it is used
func (o *ServiceSimulateDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceSimulateOKBody service simulate o k body
swagger:model ServiceSimulateOKBody
*/
type ServiceSimulateOKBody struct {

	// gas info
	GasInfo *ServiceSimulateOKBodyGasInfo `json:"gas_info,omitempty"`

	// result
	Result *ServiceSimulateOKBodyResult `json:"result,omitempty"`
}

// Validate validates this service simulate o k body
func (o *ServiceSimulateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGasInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateOKBody) validateGasInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.GasInfo) { // not required
		return nil
	}

	if o.GasInfo != nil {
		if err := o.GasInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSimulateOK" + "." + "gas_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceSimulateOK" + "." + "gas_info")
			}
			return err
		}
	}

	return nil
}

func (o *ServiceSimulateOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSimulateOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceSimulateOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service simulate o k body based on the context it is used
func (o *ServiceSimulateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGasInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateOKBody) contextValidateGasInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.GasInfo != nil {

		if swag.IsZero(o.GasInfo) { // not required
			return nil
		}

		if err := o.GasInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSimulateOK" + "." + "gas_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceSimulateOK" + "." + "gas_info")
			}
			return err
		}
	}

	return nil
}

func (o *ServiceSimulateOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {

		if swag.IsZero(o.Result) { // not required
			return nil
		}

		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSimulateOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceSimulateOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateOKBody) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceSimulateOKBodyGasInfo service simulate o k body gas info
swagger:model ServiceSimulateOKBodyGasInfo
*/
type ServiceSimulateOKBodyGasInfo struct {

	// gas used
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted string `json:"gas_wanted,omitempty"`
}

// Validate validates this service simulate o k body gas info
func (o *ServiceSimulateOKBodyGasInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service simulate o k body gas info based on context it is used
func (o *ServiceSimulateOKBodyGasInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateOKBodyGasInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateOKBodyGasInfo) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateOKBodyGasInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceSimulateOKBodyResult service simulate o k body result
swagger:model ServiceSimulateOKBodyResult
*/
type ServiceSimulateOKBodyResult struct {

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// events
	Events []*ServiceSimulateOKBodyResultEventsItems0 `json:"events"`

	// log
	Log string `json:"log,omitempty"`

	// msg responses
	MsgResponses []*ServiceSimulateOKBodyResultMsgResponsesItems0 `json:"msg_responses"`
}

// Validate validates this service simulate o k body result
func (o *ServiceSimulateOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMsgResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateOKBodyResult) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(o.Events) { // not required
		return nil
	}

	for i := 0; i < len(o.Events); i++ {
		if swag.IsZero(o.Events[i]) { // not required
			continue
		}

		if o.Events[i] != nil {
			if err := o.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceSimulateOK" + "." + "result" + "." + "events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceSimulateOK" + "." + "result" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ServiceSimulateOKBodyResult) validateMsgResponses(formats strfmt.Registry) error {
	if swag.IsZero(o.MsgResponses) { // not required
		return nil
	}

	for i := 0; i < len(o.MsgResponses); i++ {
		if swag.IsZero(o.MsgResponses[i]) { // not required
			continue
		}

		if o.MsgResponses[i] != nil {
			if err := o.MsgResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceSimulateOK" + "." + "result" + "." + "msg_responses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceSimulateOK" + "." + "result" + "." + "msg_responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service simulate o k body result based on the context it is used
func (o *ServiceSimulateOKBodyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMsgResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateOKBodyResult) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Events); i++ {

		if o.Events[i] != nil {

			if swag.IsZero(o.Events[i]) { // not required
				return nil
			}

			if err := o.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceSimulateOK" + "." + "result" + "." + "events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceSimulateOK" + "." + "result" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ServiceSimulateOKBodyResult) contextValidateMsgResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MsgResponses); i++ {

		if o.MsgResponses[i] != nil {

			if swag.IsZero(o.MsgResponses[i]) { // not required
				return nil
			}

			if err := o.MsgResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceSimulateOK" + "." + "result" + "." + "msg_responses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceSimulateOK" + "." + "result" + "." + "msg_responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResult) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceSimulateOKBodyResultEventsItems0 service simulate o k body result events items0
swagger:model ServiceSimulateOKBodyResultEventsItems0
*/
type ServiceSimulateOKBodyResultEventsItems0 struct {

	// attributes
	Attributes []*ServiceSimulateOKBodyResultEventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this service simulate o k body result events items0
func (o *ServiceSimulateOKBodyResultEventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateOKBodyResultEventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(o.Attributes); i++ {
		if swag.IsZero(o.Attributes[i]) { // not required
			continue
		}

		if o.Attributes[i] != nil {
			if err := o.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service simulate o k body result events items0 based on the context it is used
func (o *ServiceSimulateOKBodyResultEventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceSimulateOKBodyResultEventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Attributes); i++ {

		if o.Attributes[i] != nil {

			if swag.IsZero(o.Attributes[i]) { // not required
				return nil
			}

			if err := o.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResultEventsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResultEventsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateOKBodyResultEventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceSimulateOKBodyResultEventsItems0AttributesItems0 service simulate o k body result events items0 attributes items0
swagger:model ServiceSimulateOKBodyResultEventsItems0AttributesItems0
*/
type ServiceSimulateOKBodyResultEventsItems0AttributesItems0 struct {

	// index
	Index bool `json:"index,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this service simulate o k body result events items0 attributes items0
func (o *ServiceSimulateOKBodyResultEventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service simulate o k body result events items0 attributes items0 based on context it is used
func (o *ServiceSimulateOKBodyResultEventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResultEventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResultEventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateOKBodyResultEventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceSimulateOKBodyResultMsgResponsesItems0 service simulate o k body result msg responses items0
swagger:model ServiceSimulateOKBodyResultMsgResponsesItems0
*/
type ServiceSimulateOKBodyResultMsgResponsesItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// service simulate o k body result msg responses items0
	ServiceSimulateOKBodyResultMsgResponsesItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *ServiceSimulateOKBodyResultMsgResponsesItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ServiceSimulateOKBodyResultMsgResponsesItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.ServiceSimulateOKBodyResultMsgResponsesItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o ServiceSimulateOKBodyResultMsgResponsesItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.ServiceSimulateOKBodyResultMsgResponsesItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.ServiceSimulateOKBodyResultMsgResponsesItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this service simulate o k body result msg responses items0
func (o *ServiceSimulateOKBodyResultMsgResponsesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service simulate o k body result msg responses items0 based on context it is used
func (o *ServiceSimulateOKBodyResultMsgResponsesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResultMsgResponsesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceSimulateOKBodyResultMsgResponsesItems0) UnmarshalBinary(b []byte) error {
	var res ServiceSimulateOKBodyResultMsgResponsesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
