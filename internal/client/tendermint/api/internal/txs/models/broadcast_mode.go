// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BroadcastMode broadcast mode
//
// swagger:model BroadcastMode
type BroadcastMode string

func NewBroadcastMode(value BroadcastMode) *BroadcastMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BroadcastMode.
func (m BroadcastMode) Pointer() *BroadcastMode {
	return &m
}

const (

	// BroadcastModeBROADCASTMODEUNSPECIFIED captures enum value "BROADCAST_MODE_UNSPECIFIED"
	BroadcastModeBROADCASTMODEUNSPECIFIED BroadcastMode = "BROADCAST_MODE_UNSPECIFIED"

	// BroadcastModeBROADCASTMODEBLOCK captures enum value "BROADCAST_MODE_BLOCK"
	BroadcastModeBROADCASTMODEBLOCK BroadcastMode = "BROADCAST_MODE_BLOCK"

	// BroadcastModeBROADCASTMODESYNC captures enum value "BROADCAST_MODE_SYNC"
	BroadcastModeBROADCASTMODESYNC BroadcastMode = "BROADCAST_MODE_SYNC"

	// BroadcastModeBROADCASTMODEASYNC captures enum value "BROADCAST_MODE_ASYNC"
	BroadcastModeBROADCASTMODEASYNC BroadcastMode = "BROADCAST_MODE_ASYNC"
)

// for schema
var broadcastModeEnum []interface{}

func init() {
	var res []BroadcastMode
	if err := json.Unmarshal([]byte(`["BROADCAST_MODE_UNSPECIFIED","BROADCAST_MODE_BLOCK","BROADCAST_MODE_SYNC","BROADCAST_MODE_ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		broadcastModeEnum = append(broadcastModeEnum, v)
	}
}

func (m BroadcastMode) validateBroadcastModeEnum(path, location string, value BroadcastMode) error {
	if err := validate.EnumCase(path, location, value, broadcastModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this broadcast mode
func (m BroadcastMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBroadcastModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this broadcast mode based on context it is used
func (m BroadcastMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
