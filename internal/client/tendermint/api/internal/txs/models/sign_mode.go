// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SignMode sign mode
//
// swagger:model SignMode
type SignMode string

func NewSignMode(value SignMode) *SignMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SignMode.
func (m SignMode) Pointer() *SignMode {
	return &m
}

const (

	// SignModeSIGNMODEUNSPECIFIED captures enum value "SIGN_MODE_UNSPECIFIED"
	SignModeSIGNMODEUNSPECIFIED SignMode = "SIGN_MODE_UNSPECIFIED"

	// SignModeSIGNMODEDIRECT captures enum value "SIGN_MODE_DIRECT"
	SignModeSIGNMODEDIRECT SignMode = "SIGN_MODE_DIRECT"

	// SignModeSIGNMODETEXTUAL captures enum value "SIGN_MODE_TEXTUAL"
	SignModeSIGNMODETEXTUAL SignMode = "SIGN_MODE_TEXTUAL"

	// SignModeSIGNMODEDIRECTAUX captures enum value "SIGN_MODE_DIRECT_AUX"
	SignModeSIGNMODEDIRECTAUX SignMode = "SIGN_MODE_DIRECT_AUX"

	// SignModeSIGNMODELEGACYAMINOJSON captures enum value "SIGN_MODE_LEGACY_AMINO_JSON"
	SignModeSIGNMODELEGACYAMINOJSON SignMode = "SIGN_MODE_LEGACY_AMINO_JSON"

	// SignModeSIGNMODEEIP191 captures enum value "SIGN_MODE_EIP_191"
	SignModeSIGNMODEEIP191 SignMode = "SIGN_MODE_EIP_191"
)

// for schema
var signModeEnum []interface{}

func init() {
	var res []SignMode
	if err := json.Unmarshal([]byte(`["SIGN_MODE_UNSPECIFIED","SIGN_MODE_DIRECT","SIGN_MODE_TEXTUAL","SIGN_MODE_DIRECT_AUX","SIGN_MODE_LEGACY_AMINO_JSON","SIGN_MODE_EIP_191"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signModeEnum = append(signModeEnum, v)
	}
}

func (m SignMode) validateSignModeEnum(path, location string, value SignMode) error {
	if err := validate.EnumCase(path, location, value, signModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sign mode
func (m SignMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSignModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sign mode based on context it is used
func (m SignMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
