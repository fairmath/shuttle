// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModeInfoMulti mode info multi
//
// swagger:model ModeInfo.Multi
type ModeInfoMulti struct {

	// bitarray
	Bitarray *ModeInfoMultiBitarray `json:"bitarray,omitempty"`

	// mode infos
	ModeInfos []*ModeInfo `json:"mode_infos"`
}

// Validate validates this mode info multi
func (m *ModeInfoMulti) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBitarray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeInfos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModeInfoMulti) validateBitarray(formats strfmt.Registry) error {
	if swag.IsZero(m.Bitarray) { // not required
		return nil
	}

	if m.Bitarray != nil {
		if err := m.Bitarray.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bitarray")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bitarray")
			}
			return err
		}
	}

	return nil
}

func (m *ModeInfoMulti) validateModeInfos(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeInfos) { // not required
		return nil
	}

	for i := 0; i < len(m.ModeInfos); i++ {
		if swag.IsZero(m.ModeInfos[i]) { // not required
			continue
		}

		if m.ModeInfos[i] != nil {
			if err := m.ModeInfos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mode_infos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mode_infos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mode info multi based on the context it is used
func (m *ModeInfoMulti) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBitarray(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModeInfos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModeInfoMulti) contextValidateBitarray(ctx context.Context, formats strfmt.Registry) error {

	if m.Bitarray != nil {

		if swag.IsZero(m.Bitarray) { // not required
			return nil
		}

		if err := m.Bitarray.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bitarray")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bitarray")
			}
			return err
		}
	}

	return nil
}

func (m *ModeInfoMulti) contextValidateModeInfos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModeInfos); i++ {

		if m.ModeInfos[i] != nil {

			if swag.IsZero(m.ModeInfos[i]) { // not required
				return nil
			}

			if err := m.ModeInfos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mode_infos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mode_infos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModeInfoMulti) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModeInfoMulti) UnmarshalBinary(b []byte) error {
	var res ModeInfoMulti
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ModeInfoMultiBitarray mode info multi bitarray
//
// swagger:model ModeInfoMultiBitarray
type ModeInfoMultiBitarray struct {

	// elems
	// Format: byte
	Elems strfmt.Base64 `json:"elems,omitempty"`

	// extra bits stored
	ExtraBitsStored int64 `json:"extra_bits_stored,omitempty"`
}

// Validate validates this mode info multi bitarray
func (m *ModeInfoMultiBitarray) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mode info multi bitarray based on context it is used
func (m *ModeInfoMultiBitarray) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModeInfoMultiBitarray) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModeInfoMultiBitarray) UnmarshalBinary(b []byte) error {
	var res ModeInfoMultiBitarray
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
