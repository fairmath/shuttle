// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BlockIDFlag block ID flag
//
// swagger:model BlockIDFlag
type BlockIDFlag string

func NewBlockIDFlag(value BlockIDFlag) *BlockIDFlag {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BlockIDFlag.
func (m BlockIDFlag) Pointer() *BlockIDFlag {
	return &m
}

const (

	// BlockIDFlagBLOCKIDFLAGUNKNOWN captures enum value "BLOCK_ID_FLAG_UNKNOWN"
	BlockIDFlagBLOCKIDFLAGUNKNOWN BlockIDFlag = "BLOCK_ID_FLAG_UNKNOWN"

	// BlockIDFlagBLOCKIDFLAGABSENT captures enum value "BLOCK_ID_FLAG_ABSENT"
	BlockIDFlagBLOCKIDFLAGABSENT BlockIDFlag = "BLOCK_ID_FLAG_ABSENT"

	// BlockIDFlagBLOCKIDFLAGCOMMIT captures enum value "BLOCK_ID_FLAG_COMMIT"
	BlockIDFlagBLOCKIDFLAGCOMMIT BlockIDFlag = "BLOCK_ID_FLAG_COMMIT"

	// BlockIDFlagBLOCKIDFLAGNIL captures enum value "BLOCK_ID_FLAG_NIL"
	BlockIDFlagBLOCKIDFLAGNIL BlockIDFlag = "BLOCK_ID_FLAG_NIL"
)

// for schema
var blockIdFlagEnum []interface{}

func init() {
	var res []BlockIDFlag
	if err := json.Unmarshal([]byte(`["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blockIdFlagEnum = append(blockIdFlagEnum, v)
	}
}

func (m BlockIDFlag) validateBlockIDFlagEnum(path, location string, value BlockIDFlag) error {
	if err := validate.EnumCase(path, location, value, blockIdFlagEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this block ID flag
func (m BlockIDFlag) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBlockIDFlagEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this block ID flag based on context it is used
func (m BlockIDFlag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
