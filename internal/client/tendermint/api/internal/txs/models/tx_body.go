// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TxBody tx body
//
// swagger:model TxBody
type TxBody struct {

	// extension options
	ExtensionOptions []*TxBodyExtensionOptionsItems0 `json:"extension_options"`

	// memo
	Memo string `json:"memo,omitempty"`

	// messages
	Messages []*TxBodyMessagesItems0 `json:"messages"`

	// non critical extension options
	NonCriticalExtensionOptions []*TxBodyNonCriticalExtensionOptionsItems0 `json:"non_critical_extension_options"`

	// timeout height
	TimeoutHeight string `json:"timeout_height,omitempty"`
}

// Validate validates this tx body
func (m *TxBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonCriticalExtensionOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TxBody) validateExtensionOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtensionOptions); i++ {
		if swag.IsZero(m.ExtensionOptions[i]) { // not required
			continue
		}

		if m.ExtensionOptions[i] != nil {
			if err := m.ExtensionOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TxBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TxBody) validateNonCriticalExtensionOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.NonCriticalExtensionOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.NonCriticalExtensionOptions); i++ {
		if swag.IsZero(m.NonCriticalExtensionOptions[i]) { // not required
			continue
		}

		if m.NonCriticalExtensionOptions[i] != nil {
			if err := m.NonCriticalExtensionOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("non_critical_extension_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("non_critical_extension_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tx body based on the context it is used
func (m *TxBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtensionOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNonCriticalExtensionOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TxBody) contextValidateExtensionOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtensionOptions); i++ {

		if m.ExtensionOptions[i] != nil {

			if swag.IsZero(m.ExtensionOptions[i]) { // not required
				return nil
			}

			if err := m.ExtensionOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TxBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {

			if swag.IsZero(m.Messages[i]) { // not required
				return nil
			}

			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TxBody) contextValidateNonCriticalExtensionOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NonCriticalExtensionOptions); i++ {

		if m.NonCriticalExtensionOptions[i] != nil {

			if swag.IsZero(m.NonCriticalExtensionOptions[i]) { // not required
				return nil
			}

			if err := m.NonCriticalExtensionOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("non_critical_extension_options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("non_critical_extension_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TxBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TxBody) UnmarshalBinary(b []byte) error {
	var res TxBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TxBodyExtensionOptionsItems0 tx body extension options items0
//
// swagger:model TxBodyExtensionOptionsItems0
type TxBodyExtensionOptionsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// tx body extension options items0
	TxBodyExtensionOptionsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *TxBodyExtensionOptionsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv TxBodyExtensionOptionsItems0

	rcv.AtType = stage1.AtType
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.TxBodyExtensionOptionsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m TxBodyExtensionOptionsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = m.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.TxBodyExtensionOptionsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.TxBodyExtensionOptionsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this tx body extension options items0
func (m *TxBodyExtensionOptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tx body extension options items0 based on context it is used
func (m *TxBodyExtensionOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TxBodyExtensionOptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TxBodyExtensionOptionsItems0) UnmarshalBinary(b []byte) error {
	var res TxBodyExtensionOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TxBodyMessagesItems0 tx body messages items0
//
// swagger:model TxBodyMessagesItems0
type TxBodyMessagesItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// tx body messages items0
	TxBodyMessagesItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *TxBodyMessagesItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv TxBodyMessagesItems0

	rcv.AtType = stage1.AtType
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.TxBodyMessagesItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m TxBodyMessagesItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = m.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.TxBodyMessagesItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.TxBodyMessagesItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this tx body messages items0
func (m *TxBodyMessagesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tx body messages items0 based on context it is used
func (m *TxBodyMessagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TxBodyMessagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TxBodyMessagesItems0) UnmarshalBinary(b []byte) error {
	var res TxBodyMessagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TxBodyNonCriticalExtensionOptionsItems0 tx body non critical extension options items0
//
// swagger:model TxBodyNonCriticalExtensionOptionsItems0
type TxBodyNonCriticalExtensionOptionsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// tx body non critical extension options items0
	TxBodyNonCriticalExtensionOptionsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *TxBodyNonCriticalExtensionOptionsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv TxBodyNonCriticalExtensionOptionsItems0

	rcv.AtType = stage1.AtType
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.TxBodyNonCriticalExtensionOptionsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m TxBodyNonCriticalExtensionOptionsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = m.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.TxBodyNonCriticalExtensionOptionsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.TxBodyNonCriticalExtensionOptionsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this tx body non critical extension options items0
func (m *TxBodyNonCriticalExtensionOptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tx body non critical extension options items0 based on context it is used
func (m *TxBodyNonCriticalExtensionOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TxBodyNonCriticalExtensionOptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TxBodyNonCriticalExtensionOptionsItems0) UnmarshalBinary(b []byte) error {
	var res TxBodyNonCriticalExtensionOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
