// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNodeInfoResponse get node info response
//
// swagger:model GetNodeInfoResponse
type GetNodeInfoResponse struct {

	// application version
	ApplicationVersion *GetNodeInfoResponseApplicationVersion `json:"application_version,omitempty"`

	// default node info
	DefaultNodeInfo *GetNodeInfoResponseDefaultNodeInfo `json:"default_node_info,omitempty"`
}

// Validate validates this get node info response
func (m *GetNodeInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultNodeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNodeInfoResponse) validateApplicationVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationVersion) { // not required
		return nil
	}

	if m.ApplicationVersion != nil {
		if err := m.ApplicationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_version")
			}
			return err
		}
	}

	return nil
}

func (m *GetNodeInfoResponse) validateDefaultNodeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultNodeInfo) { // not required
		return nil
	}

	if m.DefaultNodeInfo != nil {
		if err := m.DefaultNodeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_node_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_node_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get node info response based on the context it is used
func (m *GetNodeInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultNodeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNodeInfoResponse) contextValidateApplicationVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationVersion != nil {

		if swag.IsZero(m.ApplicationVersion) { // not required
			return nil
		}

		if err := m.ApplicationVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_version")
			}
			return err
		}
	}

	return nil
}

func (m *GetNodeInfoResponse) contextValidateDefaultNodeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultNodeInfo != nil {

		if swag.IsZero(m.DefaultNodeInfo) { // not required
			return nil
		}

		if err := m.DefaultNodeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_node_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_node_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetNodeInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNodeInfoResponse) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetNodeInfoResponseApplicationVersion get node info response application version
//
// swagger:model GetNodeInfoResponseApplicationVersion
type GetNodeInfoResponseApplicationVersion struct {

	// app name
	AppName string `json:"app_name,omitempty"`

	// build deps
	BuildDeps []*GetNodeInfoResponseApplicationVersionBuildDepsItems0 `json:"build_deps"`

	// build tags
	BuildTags string `json:"build_tags,omitempty"`

	// cosmos sdk version
	CosmosSdkVersion string `json:"cosmos_sdk_version,omitempty"`

	// git commit
	GitCommit string `json:"git_commit,omitempty"`

	// go version
	GoVersion string `json:"go_version,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this get node info response application version
func (m *GetNodeInfoResponseApplicationVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildDeps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNodeInfoResponseApplicationVersion) validateBuildDeps(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildDeps) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildDeps); i++ {
		if swag.IsZero(m.BuildDeps[i]) { // not required
			continue
		}

		if m.BuildDeps[i] != nil {
			if err := m.BuildDeps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get node info response application version based on the context it is used
func (m *GetNodeInfoResponseApplicationVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildDeps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNodeInfoResponseApplicationVersion) contextValidateBuildDeps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BuildDeps); i++ {

		if m.BuildDeps[i] != nil {

			if swag.IsZero(m.BuildDeps[i]) { // not required
				return nil
			}

			if err := m.BuildDeps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetNodeInfoResponseApplicationVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNodeInfoResponseApplicationVersion) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoResponseApplicationVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetNodeInfoResponseApplicationVersionBuildDepsItems0 get node info response application version build deps items0
//
// swagger:model GetNodeInfoResponseApplicationVersionBuildDepsItems0
type GetNodeInfoResponseApplicationVersionBuildDepsItems0 struct {

	// path
	Path string `json:"path,omitempty"`

	// sum
	Sum string `json:"sum,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this get node info response application version build deps items0
func (m *GetNodeInfoResponseApplicationVersionBuildDepsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get node info response application version build deps items0 based on context it is used
func (m *GetNodeInfoResponseApplicationVersionBuildDepsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetNodeInfoResponseApplicationVersionBuildDepsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNodeInfoResponseApplicationVersionBuildDepsItems0) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoResponseApplicationVersionBuildDepsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetNodeInfoResponseDefaultNodeInfo get node info response default node info
//
// swagger:model GetNodeInfoResponseDefaultNodeInfo
type GetNodeInfoResponseDefaultNodeInfo struct {

	// channels
	// Format: byte
	Channels strfmt.Base64 `json:"channels,omitempty"`

	// default node id
	DefaultNodeID string `json:"default_node_id,omitempty"`

	// listen addr
	ListenAddr string `json:"listen_addr,omitempty"`

	// moniker
	Moniker string `json:"moniker,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// other
	Other *GetNodeInfoResponseDefaultNodeInfoOther `json:"other,omitempty"`

	// protocol version
	ProtocolVersion *GetNodeInfoResponseDefaultNodeInfoProtocolVersion `json:"protocol_version,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this get node info response default node info
func (m *GetNodeInfoResponseDefaultNodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNodeInfoResponseDefaultNodeInfo) validateOther(formats strfmt.Registry) error {
	if swag.IsZero(m.Other) { // not required
		return nil
	}

	if m.Other != nil {
		if err := m.Other.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_node_info" + "." + "other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_node_info" + "." + "other")
			}
			return err
		}
	}

	return nil
}

func (m *GetNodeInfoResponseDefaultNodeInfo) validateProtocolVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtocolVersion) { // not required
		return nil
	}

	if m.ProtocolVersion != nil {
		if err := m.ProtocolVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_node_info" + "." + "protocol_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_node_info" + "." + "protocol_version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get node info response default node info based on the context it is used
func (m *GetNodeInfoResponseDefaultNodeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOther(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocolVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNodeInfoResponseDefaultNodeInfo) contextValidateOther(ctx context.Context, formats strfmt.Registry) error {

	if m.Other != nil {

		if swag.IsZero(m.Other) { // not required
			return nil
		}

		if err := m.Other.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_node_info" + "." + "other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_node_info" + "." + "other")
			}
			return err
		}
	}

	return nil
}

func (m *GetNodeInfoResponseDefaultNodeInfo) contextValidateProtocolVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtocolVersion != nil {

		if swag.IsZero(m.ProtocolVersion) { // not required
			return nil
		}

		if err := m.ProtocolVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_node_info" + "." + "protocol_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_node_info" + "." + "protocol_version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetNodeInfoResponseDefaultNodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNodeInfoResponseDefaultNodeInfo) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoResponseDefaultNodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetNodeInfoResponseDefaultNodeInfoOther get node info response default node info other
//
// swagger:model GetNodeInfoResponseDefaultNodeInfoOther
type GetNodeInfoResponseDefaultNodeInfoOther struct {

	// rpc address
	RPCAddress string `json:"rpc_address,omitempty"`

	// tx index
	TxIndex string `json:"tx_index,omitempty"`
}

// Validate validates this get node info response default node info other
func (m *GetNodeInfoResponseDefaultNodeInfoOther) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get node info response default node info other based on context it is used
func (m *GetNodeInfoResponseDefaultNodeInfoOther) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetNodeInfoResponseDefaultNodeInfoOther) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNodeInfoResponseDefaultNodeInfoOther) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoResponseDefaultNodeInfoOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetNodeInfoResponseDefaultNodeInfoProtocolVersion get node info response default node info protocol version
//
// swagger:model GetNodeInfoResponseDefaultNodeInfoProtocolVersion
type GetNodeInfoResponseDefaultNodeInfoProtocolVersion struct {

	// app
	App string `json:"app,omitempty"`

	// block
	Block string `json:"block,omitempty"`

	// p2p
	P2p string `json:"p2p,omitempty"`
}

// Validate validates this get node info response default node info protocol version
func (m *GetNodeInfoResponseDefaultNodeInfoProtocolVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get node info response default node info protocol version based on context it is used
func (m *GetNodeInfoResponseDefaultNodeInfoProtocolVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetNodeInfoResponseDefaultNodeInfoProtocolVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNodeInfoResponseDefaultNodeInfoProtocolVersion) UnmarshalBinary(b []byte) error {
	var res GetNodeInfoResponseDefaultNodeInfoProtocolVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
