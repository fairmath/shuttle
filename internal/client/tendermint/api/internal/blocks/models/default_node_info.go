// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DefaultNodeInfo default node info
//
// swagger:model DefaultNodeInfo
type DefaultNodeInfo struct {

	// channels
	// Format: byte
	Channels strfmt.Base64 `json:"channels,omitempty"`

	// default node id
	DefaultNodeID string `json:"default_node_id,omitempty"`

	// listen addr
	ListenAddr string `json:"listen_addr,omitempty"`

	// moniker
	Moniker string `json:"moniker,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// other
	Other *DefaultNodeInfoOther `json:"other,omitempty"`

	// protocol version
	ProtocolVersion *DefaultNodeInfoProtocolVersion `json:"protocol_version,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this default node info
func (m *DefaultNodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultNodeInfo) validateOther(formats strfmt.Registry) error {
	if swag.IsZero(m.Other) { // not required
		return nil
	}

	if m.Other != nil {
		if err := m.Other.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("other")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultNodeInfo) validateProtocolVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtocolVersion) { // not required
		return nil
	}

	if m.ProtocolVersion != nil {
		if err := m.ProtocolVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protocol_version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this default node info based on the context it is used
func (m *DefaultNodeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOther(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocolVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultNodeInfo) contextValidateOther(ctx context.Context, formats strfmt.Registry) error {

	if m.Other != nil {

		if swag.IsZero(m.Other) { // not required
			return nil
		}

		if err := m.Other.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("other")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultNodeInfo) contextValidateProtocolVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtocolVersion != nil {

		if swag.IsZero(m.ProtocolVersion) { // not required
			return nil
		}

		if err := m.ProtocolVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protocol_version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefaultNodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefaultNodeInfo) UnmarshalBinary(b []byte) error {
	var res DefaultNodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefaultNodeInfoOther default node info other
//
// swagger:model DefaultNodeInfoOther
type DefaultNodeInfoOther struct {

	// rpc address
	RPCAddress string `json:"rpc_address,omitempty"`

	// tx index
	TxIndex string `json:"tx_index,omitempty"`
}

// Validate validates this default node info other
func (m *DefaultNodeInfoOther) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this default node info other based on context it is used
func (m *DefaultNodeInfoOther) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefaultNodeInfoOther) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefaultNodeInfoOther) UnmarshalBinary(b []byte) error {
	var res DefaultNodeInfoOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefaultNodeInfoProtocolVersion default node info protocol version
//
// swagger:model DefaultNodeInfoProtocolVersion
type DefaultNodeInfoProtocolVersion struct {

	// app
	App string `json:"app,omitempty"`

	// block
	Block string `json:"block,omitempty"`

	// p2p
	P2p string `json:"p2p,omitempty"`
}

// Validate validates this default node info protocol version
func (m *DefaultNodeInfoProtocolVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this default node info protocol version based on context it is used
func (m *DefaultNodeInfoProtocolVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefaultNodeInfoProtocolVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefaultNodeInfoProtocolVersion) UnmarshalBinary(b []byte) error {
	var res DefaultNodeInfoProtocolVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
