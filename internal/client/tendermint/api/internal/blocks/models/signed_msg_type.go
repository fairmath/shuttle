// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SignedMsgType signed msg type
//
// swagger:model SignedMsgType
type SignedMsgType string

func NewSignedMsgType(value SignedMsgType) *SignedMsgType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SignedMsgType.
func (m SignedMsgType) Pointer() *SignedMsgType {
	return &m
}

const (

	// SignedMsgTypeSIGNEDMSGTYPEUNKNOWN captures enum value "SIGNED_MSG_TYPE_UNKNOWN"
	SignedMsgTypeSIGNEDMSGTYPEUNKNOWN SignedMsgType = "SIGNED_MSG_TYPE_UNKNOWN"

	// SignedMsgTypeSIGNEDMSGTYPEPREVOTE captures enum value "SIGNED_MSG_TYPE_PREVOTE"
	SignedMsgTypeSIGNEDMSGTYPEPREVOTE SignedMsgType = "SIGNED_MSG_TYPE_PREVOTE"

	// SignedMsgTypeSIGNEDMSGTYPEPRECOMMIT captures enum value "SIGNED_MSG_TYPE_PRECOMMIT"
	SignedMsgTypeSIGNEDMSGTYPEPRECOMMIT SignedMsgType = "SIGNED_MSG_TYPE_PRECOMMIT"

	// SignedMsgTypeSIGNEDMSGTYPEPROPOSAL captures enum value "SIGNED_MSG_TYPE_PROPOSAL"
	SignedMsgTypeSIGNEDMSGTYPEPROPOSAL SignedMsgType = "SIGNED_MSG_TYPE_PROPOSAL"
)

// for schema
var signedMsgTypeEnum []interface{}

func init() {
	var res []SignedMsgType
	if err := json.Unmarshal([]byte(`["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signedMsgTypeEnum = append(signedMsgTypeEnum, v)
	}
}

func (m SignedMsgType) validateSignedMsgTypeEnum(path, location string, value SignedMsgType) error {
	if err := validate.EnumCase(path, location, value, signedMsgTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this signed msg type
func (m SignedMsgType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSignedMsgTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this signed msg type based on context it is used
func (m SignedMsgType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
