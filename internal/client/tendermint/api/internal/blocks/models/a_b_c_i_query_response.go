// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ABCIQueryResponse a b c i query response
//
// swagger:model ABCIQueryResponse
type ABCIQueryResponse struct {

	// code
	Code int64 `json:"code,omitempty"`

	// codespace
	Codespace string `json:"codespace,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// index
	Index string `json:"index,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// proof ops
	ProofOps *ABCIQueryResponseProofOps `json:"proof_ops,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this a b c i query response
func (m *ABCIQueryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProofOps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ABCIQueryResponse) validateProofOps(formats strfmt.Registry) error {
	if swag.IsZero(m.ProofOps) { // not required
		return nil
	}

	if m.ProofOps != nil {
		if err := m.ProofOps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proof_ops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proof_ops")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a b c i query response based on the context it is used
func (m *ABCIQueryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProofOps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ABCIQueryResponse) contextValidateProofOps(ctx context.Context, formats strfmt.Registry) error {

	if m.ProofOps != nil {

		if swag.IsZero(m.ProofOps) { // not required
			return nil
		}

		if err := m.ProofOps.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proof_ops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proof_ops")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ABCIQueryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ABCIQueryResponse) UnmarshalBinary(b []byte) error {
	var res ABCIQueryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ABCIQueryResponseProofOps a b c i query response proof ops
//
// swagger:model ABCIQueryResponseProofOps
type ABCIQueryResponseProofOps struct {

	// ops
	Ops []*ABCIQueryResponseProofOpsOpsItems0 `json:"ops"`
}

// Validate validates this a b c i query response proof ops
func (m *ABCIQueryResponseProofOps) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ABCIQueryResponseProofOps) validateOps(formats strfmt.Registry) error {
	if swag.IsZero(m.Ops) { // not required
		return nil
	}

	for i := 0; i < len(m.Ops); i++ {
		if swag.IsZero(m.Ops[i]) { // not required
			continue
		}

		if m.Ops[i] != nil {
			if err := m.Ops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proof_ops" + "." + "ops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proof_ops" + "." + "ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this a b c i query response proof ops based on the context it is used
func (m *ABCIQueryResponseProofOps) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ABCIQueryResponseProofOps) contextValidateOps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ops); i++ {

		if m.Ops[i] != nil {

			if swag.IsZero(m.Ops[i]) { // not required
				return nil
			}

			if err := m.Ops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proof_ops" + "." + "ops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proof_ops" + "." + "ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ABCIQueryResponseProofOps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ABCIQueryResponseProofOps) UnmarshalBinary(b []byte) error {
	var res ABCIQueryResponseProofOps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ABCIQueryResponseProofOpsOpsItems0 a b c i query response proof ops ops items0
//
// swagger:model ABCIQueryResponseProofOpsOpsItems0
type ABCIQueryResponseProofOpsOpsItems0 struct {

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this a b c i query response proof ops ops items0
func (m *ABCIQueryResponseProofOpsOpsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this a b c i query response proof ops ops items0 based on context it is used
func (m *ABCIQueryResponseProofOpsOpsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ABCIQueryResponseProofOpsOpsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ABCIQueryResponseProofOpsOpsItems0) UnmarshalBinary(b []byte) error {
	var res ABCIQueryResponseProofOpsOpsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
