// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServiceABCIQuery(params *ServiceABCIQueryParams, opts ...ClientOption) (*ServiceABCIQueryOK, error)

	ServiceGetBlockByHeight(params *ServiceGetBlockByHeightParams, opts ...ClientOption) (*ServiceGetBlockByHeightOK, error)

	ServiceGetLatestBlock(params *ServiceGetLatestBlockParams, opts ...ClientOption) (*ServiceGetLatestBlockOK, error)

	ServiceGetLatestValidatorSet(params *ServiceGetLatestValidatorSetParams, opts ...ClientOption) (*ServiceGetLatestValidatorSetOK, error)

	ServiceGetNodeInfo(params *ServiceGetNodeInfoParams, opts ...ClientOption) (*ServiceGetNodeInfoOK, error)

	ServiceGetSyncing(params *ServiceGetSyncingParams, opts ...ClientOption) (*ServiceGetSyncingOK, error)

	ServiceGetValidatorSetByHeight(params *ServiceGetValidatorSetByHeightParams, opts ...ClientOption) (*ServiceGetValidatorSetByHeightOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ServiceABCIQuery service a b c i query API
*/
func (a *Client) ServiceABCIQuery(params *ServiceABCIQueryParams, opts ...ClientOption) (*ServiceABCIQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceABCIQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_ABCIQuery",
		Method:             "GET",
		PathPattern:        "/cosmos/base/tendermint/v1beta1/abci_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceABCIQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceABCIQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceABCIQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetBlockByHeight service get block by height API
*/
func (a *Client) ServiceGetBlockByHeight(params *ServiceGetBlockByHeightParams, opts ...ClientOption) (*ServiceGetBlockByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetBlockByHeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetBlockByHeight",
		Method:             "GET",
		PathPattern:        "/cosmos/base/tendermint/v1beta1/blocks/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetBlockByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetBlockByHeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetBlockByHeightDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetLatestBlock service get latest block API
*/
func (a *Client) ServiceGetLatestBlock(params *ServiceGetLatestBlockParams, opts ...ClientOption) (*ServiceGetLatestBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetLatestBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetLatestBlock",
		Method:             "GET",
		PathPattern:        "/cosmos/base/tendermint/v1beta1/blocks/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetLatestBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetLatestBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetLatestBlockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetLatestValidatorSet service get latest validator set API
*/
func (a *Client) ServiceGetLatestValidatorSet(params *ServiceGetLatestValidatorSetParams, opts ...ClientOption) (*ServiceGetLatestValidatorSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetLatestValidatorSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetLatestValidatorSet",
		Method:             "GET",
		PathPattern:        "/cosmos/base/tendermint/v1beta1/validatorsets/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetLatestValidatorSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetLatestValidatorSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetLatestValidatorSetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetNodeInfo service get node info API
*/
func (a *Client) ServiceGetNodeInfo(params *ServiceGetNodeInfoParams, opts ...ClientOption) (*ServiceGetNodeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetNodeInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetNodeInfo",
		Method:             "GET",
		PathPattern:        "/cosmos/base/tendermint/v1beta1/node_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetNodeInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetNodeInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetNodeInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetSyncing service get syncing API
*/
func (a *Client) ServiceGetSyncing(params *ServiceGetSyncingParams, opts ...ClientOption) (*ServiceGetSyncingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetSyncingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetSyncing",
		Method:             "GET",
		PathPattern:        "/cosmos/base/tendermint/v1beta1/syncing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetSyncingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetSyncingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetSyncingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServiceGetValidatorSetByHeight service get validator set by height API
*/
func (a *Client) ServiceGetValidatorSetByHeight(params *ServiceGetValidatorSetByHeightParams, opts ...ClientOption) (*ServiceGetValidatorSetByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetValidatorSetByHeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Service_GetValidatorSetByHeight",
		Method:             "GET",
		PathPattern:        "/cosmos/base/tendermint/v1beta1/validatorsets/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetValidatorSetByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetValidatorSetByHeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServiceGetValidatorSetByHeightDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
