// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewServiceABCIQueryParams creates a new ServiceABCIQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServiceABCIQueryParams() *ServiceABCIQueryParams {
	return &ServiceABCIQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServiceABCIQueryParamsWithTimeout creates a new ServiceABCIQueryParams object
// with the ability to set a timeout on a request.
func NewServiceABCIQueryParamsWithTimeout(timeout time.Duration) *ServiceABCIQueryParams {
	return &ServiceABCIQueryParams{
		timeout: timeout,
	}
}

// NewServiceABCIQueryParamsWithContext creates a new ServiceABCIQueryParams object
// with the ability to set a context for a request.
func NewServiceABCIQueryParamsWithContext(ctx context.Context) *ServiceABCIQueryParams {
	return &ServiceABCIQueryParams{
		Context: ctx,
	}
}

// NewServiceABCIQueryParamsWithHTTPClient creates a new ServiceABCIQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewServiceABCIQueryParamsWithHTTPClient(client *http.Client) *ServiceABCIQueryParams {
	return &ServiceABCIQueryParams{
		HTTPClient: client,
	}
}

/*
ServiceABCIQueryParams contains all the parameters to send to the API endpoint

	for the service a b c i query operation.

	Typically these are written to a http.Request.
*/
type ServiceABCIQueryParams struct {

	// Data.
	//
	// Format: byte
	Data *strfmt.Base64

	// Height.
	//
	// Format: int64
	Height *string

	// Path.
	Path *string

	// Prove.
	Prove *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the service a b c i query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServiceABCIQueryParams) WithDefaults() *ServiceABCIQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the service a b c i query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServiceABCIQueryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the service a b c i query params
func (o *ServiceABCIQueryParams) WithTimeout(timeout time.Duration) *ServiceABCIQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the service a b c i query params
func (o *ServiceABCIQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the service a b c i query params
func (o *ServiceABCIQueryParams) WithContext(ctx context.Context) *ServiceABCIQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the service a b c i query params
func (o *ServiceABCIQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the service a b c i query params
func (o *ServiceABCIQueryParams) WithHTTPClient(client *http.Client) *ServiceABCIQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the service a b c i query params
func (o *ServiceABCIQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the service a b c i query params
func (o *ServiceABCIQueryParams) WithData(data *strfmt.Base64) *ServiceABCIQueryParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the service a b c i query params
func (o *ServiceABCIQueryParams) SetData(data *strfmt.Base64) {
	o.Data = data
}

// WithHeight adds the height to the service a b c i query params
func (o *ServiceABCIQueryParams) WithHeight(height *string) *ServiceABCIQueryParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the service a b c i query params
func (o *ServiceABCIQueryParams) SetHeight(height *string) {
	o.Height = height
}

// WithPath adds the path to the service a b c i query params
func (o *ServiceABCIQueryParams) WithPath(path *string) *ServiceABCIQueryParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the service a b c i query params
func (o *ServiceABCIQueryParams) SetPath(path *string) {
	o.Path = path
}

// WithProve adds the prove to the service a b c i query params
func (o *ServiceABCIQueryParams) WithProve(prove *bool) *ServiceABCIQueryParams {
	o.SetProve(prove)
	return o
}

// SetProve adds the prove to the service a b c i query params
func (o *ServiceABCIQueryParams) SetProve(prove *bool) {
	o.Prove = prove
}

// WriteToRequest writes these params to a swagger request
func (o *ServiceABCIQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Data != nil {

		// query param data
		var qrData strfmt.Base64

		if o.Data != nil {
			qrData = *o.Data
		}
		qData := qrData.String()
		if qData != "" {

			if err := r.SetQueryParam("data", qData); err != nil {
				return err
			}
		}
	}

	if o.Height != nil {

		// query param height
		var qrHeight string

		if o.Height != nil {
			qrHeight = *o.Height
		}
		qHeight := qrHeight
		if qHeight != "" {

			if err := r.SetQueryParam("height", qHeight); err != nil {
				return err
			}
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.Prove != nil {

		// query param prove
		var qrProve bool

		if o.Prove != nil {
			qrProve = *o.Prove
		}
		qProve := swag.FormatBool(qrProve)
		if qProve != "" {

			if err := r.SetQueryParam("prove", qProve); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
