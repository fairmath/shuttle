// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceGetNodeInfoReader is a Reader for the ServiceGetNodeInfo structure.
type ServiceGetNodeInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceGetNodeInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceGetNodeInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServiceGetNodeInfoDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServiceGetNodeInfoOK creates a ServiceGetNodeInfoOK with default headers values
func NewServiceGetNodeInfoOK() *ServiceGetNodeInfoOK {
	return &ServiceGetNodeInfoOK{}
}

/*
ServiceGetNodeInfoOK describes a response with status code 200, with default header values.

A successful response.
*/
type ServiceGetNodeInfoOK struct {
	Payload *ServiceGetNodeInfoOKBody
}

// IsSuccess returns true when this service get node info o k response has a 2xx status code
func (o *ServiceGetNodeInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this service get node info o k response has a 3xx status code
func (o *ServiceGetNodeInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service get node info o k response has a 4xx status code
func (o *ServiceGetNodeInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this service get node info o k response has a 5xx status code
func (o *ServiceGetNodeInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this service get node info o k response a status code equal to that given
func (o *ServiceGetNodeInfoOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the service get node info o k response
func (o *ServiceGetNodeInfoOK) Code() int {
	return 200
}

func (o *ServiceGetNodeInfoOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/base/tendermint/v1beta1/node_info][%d] serviceGetNodeInfoOK %s", 200, payload)
}

func (o *ServiceGetNodeInfoOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/base/tendermint/v1beta1/node_info][%d] serviceGetNodeInfoOK %s", 200, payload)
}

func (o *ServiceGetNodeInfoOK) GetPayload() *ServiceGetNodeInfoOKBody {
	return o.Payload
}

func (o *ServiceGetNodeInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServiceGetNodeInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceGetNodeInfoDefault creates a ServiceGetNodeInfoDefault with default headers values
func NewServiceGetNodeInfoDefault(code int) *ServiceGetNodeInfoDefault {
	return &ServiceGetNodeInfoDefault{
		_statusCode: code,
	}
}

/*
ServiceGetNodeInfoDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ServiceGetNodeInfoDefault struct {
	_statusCode int

	Payload *ServiceGetNodeInfoDefaultBody
}

// IsSuccess returns true when this service get node info default response has a 2xx status code
func (o *ServiceGetNodeInfoDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this service get node info default response has a 3xx status code
func (o *ServiceGetNodeInfoDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this service get node info default response has a 4xx status code
func (o *ServiceGetNodeInfoDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this service get node info default response has a 5xx status code
func (o *ServiceGetNodeInfoDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this service get node info default response a status code equal to that given
func (o *ServiceGetNodeInfoDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the service get node info default response
func (o *ServiceGetNodeInfoDefault) Code() int {
	return o._statusCode
}

func (o *ServiceGetNodeInfoDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/base/tendermint/v1beta1/node_info][%d] Service_GetNodeInfo default %s", o._statusCode, payload)
}

func (o *ServiceGetNodeInfoDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cosmos/base/tendermint/v1beta1/node_info][%d] Service_GetNodeInfo default %s", o._statusCode, payload)
}

func (o *ServiceGetNodeInfoDefault) GetPayload() *ServiceGetNodeInfoDefaultBody {
	return o.Payload
}

func (o *ServiceGetNodeInfoDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServiceGetNodeInfoDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ServiceGetNodeInfoDefaultBody service get node info default body
swagger:model ServiceGetNodeInfoDefaultBody
*/
type ServiceGetNodeInfoDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ServiceGetNodeInfoDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this service get node info default body
func (o *ServiceGetNodeInfoDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service_GetNodeInfo default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service_GetNodeInfo default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service get node info default body based on the context it is used
func (o *ServiceGetNodeInfoDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service_GetNodeInfo default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service_GetNodeInfo default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceGetNodeInfoDefaultBodyDetailsItems0 service get node info default body details items0
swagger:model ServiceGetNodeInfoDefaultBodyDetailsItems0
*/
type ServiceGetNodeInfoDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// service get node info default body details items0
	ServiceGetNodeInfoDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *ServiceGetNodeInfoDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ServiceGetNodeInfoDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.ServiceGetNodeInfoDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o ServiceGetNodeInfoDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.ServiceGetNodeInfoDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.ServiceGetNodeInfoDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this service get node info default body details items0
func (o *ServiceGetNodeInfoDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service get node info default body details items0 based on context it is used
func (o *ServiceGetNodeInfoDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceGetNodeInfoOKBody service get node info o k body
swagger:model ServiceGetNodeInfoOKBody
*/
type ServiceGetNodeInfoOKBody struct {

	// application version
	ApplicationVersion *ServiceGetNodeInfoOKBodyApplicationVersion `json:"application_version,omitempty"`

	// default node info
	DefaultNodeInfo *ServiceGetNodeInfoOKBodyDefaultNodeInfo `json:"default_node_info,omitempty"`
}

// Validate validates this service get node info o k body
func (o *ServiceGetNodeInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultNodeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoOKBody) validateApplicationVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ApplicationVersion) { // not required
		return nil
	}

	if o.ApplicationVersion != nil {
		if err := o.ApplicationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "application_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "application_version")
			}
			return err
		}
	}

	return nil
}

func (o *ServiceGetNodeInfoOKBody) validateDefaultNodeInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.DefaultNodeInfo) { // not required
		return nil
	}

	if o.DefaultNodeInfo != nil {
		if err := o.DefaultNodeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service get node info o k body based on the context it is used
func (o *ServiceGetNodeInfoOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApplicationVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDefaultNodeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoOKBody) contextValidateApplicationVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ApplicationVersion != nil {

		if swag.IsZero(o.ApplicationVersion) { // not required
			return nil
		}

		if err := o.ApplicationVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "application_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "application_version")
			}
			return err
		}
	}

	return nil
}

func (o *ServiceGetNodeInfoOKBody) contextValidateDefaultNodeInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.DefaultNodeInfo != nil {

		if swag.IsZero(o.DefaultNodeInfo) { // not required
			return nil
		}

		if err := o.DefaultNodeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBody) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceGetNodeInfoOKBodyApplicationVersion service get node info o k body application version
swagger:model ServiceGetNodeInfoOKBodyApplicationVersion
*/
type ServiceGetNodeInfoOKBodyApplicationVersion struct {

	// app name
	AppName string `json:"app_name,omitempty"`

	// build deps
	BuildDeps []*ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0 `json:"build_deps"`

	// build tags
	BuildTags string `json:"build_tags,omitempty"`

	// cosmos sdk version
	CosmosSdkVersion string `json:"cosmos_sdk_version,omitempty"`

	// git commit
	GitCommit string `json:"git_commit,omitempty"`

	// go version
	GoVersion string `json:"go_version,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this service get node info o k body application version
func (o *ServiceGetNodeInfoOKBodyApplicationVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBuildDeps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoOKBodyApplicationVersion) validateBuildDeps(formats strfmt.Registry) error {
	if swag.IsZero(o.BuildDeps) { // not required
		return nil
	}

	for i := 0; i < len(o.BuildDeps); i++ {
		if swag.IsZero(o.BuildDeps[i]) { // not required
			continue
		}

		if o.BuildDeps[i] != nil {
			if err := o.BuildDeps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceGetNodeInfoOK" + "." + "application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceGetNodeInfoOK" + "." + "application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service get node info o k body application version based on the context it is used
func (o *ServiceGetNodeInfoOKBodyApplicationVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBuildDeps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoOKBodyApplicationVersion) contextValidateBuildDeps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.BuildDeps); i++ {

		if o.BuildDeps[i] != nil {

			if swag.IsZero(o.BuildDeps[i]) { // not required
				return nil
			}

			if err := o.BuildDeps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceGetNodeInfoOK" + "." + "application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceGetNodeInfoOK" + "." + "application_version" + "." + "build_deps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyApplicationVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyApplicationVersion) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoOKBodyApplicationVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0 service get node info o k body application version build deps items0
swagger:model ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0
*/
type ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0 struct {

	// path
	Path string `json:"path,omitempty"`

	// sum
	Sum string `json:"sum,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this service get node info o k body application version build deps items0
func (o *ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service get node info o k body application version build deps items0 based on context it is used
func (o *ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoOKBodyApplicationVersionBuildDepsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceGetNodeInfoOKBodyDefaultNodeInfo service get node info o k body default node info
swagger:model ServiceGetNodeInfoOKBodyDefaultNodeInfo
*/
type ServiceGetNodeInfoOKBodyDefaultNodeInfo struct {

	// channels
	// Format: byte
	Channels strfmt.Base64 `json:"channels,omitempty"`

	// default node id
	DefaultNodeID string `json:"default_node_id,omitempty"`

	// listen addr
	ListenAddr string `json:"listen_addr,omitempty"`

	// moniker
	Moniker string `json:"moniker,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// other
	Other *ServiceGetNodeInfoOKBodyDefaultNodeInfoOther `json:"other,omitempty"`

	// protocol version
	ProtocolVersion *ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion `json:"protocol_version,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this service get node info o k body default node info
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocolVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) validateOther(formats strfmt.Registry) error {
	if swag.IsZero(o.Other) { // not required
		return nil
	}

	if o.Other != nil {
		if err := o.Other.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "other")
			}
			return err
		}
	}

	return nil
}

func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) validateProtocolVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ProtocolVersion) { // not required
		return nil
	}

	if o.ProtocolVersion != nil {
		if err := o.ProtocolVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "protocol_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "protocol_version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service get node info o k body default node info based on the context it is used
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOther(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProtocolVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) contextValidateOther(ctx context.Context, formats strfmt.Registry) error {

	if o.Other != nil {

		if swag.IsZero(o.Other) { // not required
			return nil
		}

		if err := o.Other.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "other")
			}
			return err
		}
	}

	return nil
}

func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) contextValidateProtocolVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ProtocolVersion != nil {

		if swag.IsZero(o.ProtocolVersion) { // not required
			return nil
		}

		if err := o.ProtocolVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "protocol_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceGetNodeInfoOK" + "." + "default_node_info" + "." + "protocol_version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfo) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoOKBodyDefaultNodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceGetNodeInfoOKBodyDefaultNodeInfoOther service get node info o k body default node info other
swagger:model ServiceGetNodeInfoOKBodyDefaultNodeInfoOther
*/
type ServiceGetNodeInfoOKBodyDefaultNodeInfoOther struct {

	// rpc address
	RPCAddress string `json:"rpc_address,omitempty"`

	// tx index
	TxIndex string `json:"tx_index,omitempty"`
}

// Validate validates this service get node info o k body default node info other
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoOther) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service get node info o k body default node info other based on context it is used
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoOther) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoOther) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoOther) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoOKBodyDefaultNodeInfoOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion service get node info o k body default node info protocol version
swagger:model ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion
*/
type ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion struct {

	// app
	App string `json:"app,omitempty"`

	// block
	Block string `json:"block,omitempty"`

	// p2p
	P2p string `json:"p2p,omitempty"`
}

// Validate validates this service get node info o k body default node info protocol version
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service get node info o k body default node info protocol version based on context it is used
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion) UnmarshalBinary(b []byte) error {
	var res ServiceGetNodeInfoOKBodyDefaultNodeInfoProtocolVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
