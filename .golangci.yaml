run:
  deadline: 15m
  timeout: 15m
  concurrency: 4
  issues-exit-code: 1

linters:
  enable-all: true
  disable:
    - godox # TODO: enable

    # No idea why we can't use replace in go.mod when it's our only chance to fix upstream bug.
    - gomoddirectives

    # Could be tuned but requires too much effort to configure properly. Seems not a big deal.
    - varnamelen

    # Seems to be overkill for application (not a library package).
    - testableexamples

    # Doesn't work with complex constructors, too many false positive
    - exhaustruct

    # Seems that there is no need to deny the use of any packages
    - depguard

linters-settings:
  maligned:
    suggest-new: true

  nolintlint:
    require-specific: true
    require-explanation: true
    allow-leading-space: false
    allow-no-explanation:
      - gochecknoglobals

  lll:
    line-length: 130

  govet:
    settings:
      # analyzer name, run `go tool vet help` to see all analyzers
      printf:
        # run `go tool vet help printf` to see available settings for `printf` analyzer
        #
        # Note, that fully qualified path like `(pkg.Type).Func` won't work in our case
        # cos we do not defined logger interface by ourselves. So now just use a "wildcard"
        # matcher "anything named like following".
        funcs:
          # Printf-like
          - debugf
          - infof
          - warnf
          - errorf
          # Print-like
          - debug
          - info
          - warn
          - error

  exhaustive:
    default-signifies-exhaustive: true

  ireturn:
    allow:
      # Default, as added values override default
      - error
      - empty
      - stdlib

  tagliatelle:
    # Check the struct tag name case.
    case:
      # `camel` is used for `json` and `yaml`, and `header` is used for `header` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `upperSnake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`
        json: kebab,snake
        yaml: kebab
        xml: camel
        avro: snake
        mapstructure: kebab
        env: upperSnake
        envconfig: upperSnake

  nlreturn:
    # Size of the block (including return statement that is still "OK")
    # so no return split required.
    # Default: 1
    block-size: 2

  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    # Default: [".Errorf(", "errors.New(", "errors.Unwrap(", ".Wrap(", ".Wrapf(", ".WithMessage(", ".WithMessagef(", ".WithStack("]
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
      - (context.Context).Err()

  mnd:
    # List of numbers to exclude from analysis.
    # The numbers should be written as string.
    # Values always ignored: "1", "1.0", "0" and "0.0"
    # Default: []
    ignored-numbers:
      - '1'
      - '2'
      - '0o400'
      - '0o444'
      - '0o600'
      - '0o644'
      - '0o666'
      - '0o700'
      - '0o755'
      - '0o777'
      - '1e3'
      - '1e6'
      - '1e9'
      - '1e10'
      - '1e12'

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 70
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 40
    # Ignore comments when counting lines.
    # Default false
    # ignore-comments: true

  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 20
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 0
    # Should ignore tests.
    # Default: false
    skip-tests: false

  gci:
    # DEPRECATED: use `sections` and `prefix(github.com/org/project)` instead.
    # local-prefixes: github.com/org/project
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/fairmath/shuttle) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
    # Skip generated files.
    # Default: true
    skip-generated: false
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true

  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of available settings.
    # These are the defaults for `golangci-lint`.

    # Do strict checking when assigning from append (x = append(x, y)). If
    # this is set to true - the append call must append either a variable
    # assigned, called or used on the line above.
    strict-append: true
    # Allows assignments to be cuddled with variables used in calls on
    # line above and calls to be cuddled with assignments of variables
    # used in call on line above.
    allow-assign-and-call: true
    # Allows assignments to be cuddled with anything.
    allow-assign-and-anything: true
    # Allows cuddling to assignments even if they span over multiple lines.
    allow-multiline-assign: true
    # If the number of lines in a case block is equal to or lager than this
    # number, the case *must* end white a newline.
    force-case-trailing-whitespace: 0
    # Allow blocks to end with comments.
    allow-trailing-comment: true
    # Allow multiple comments in the beginning of a block separated with newline.
    allow-separated-leading-comment: true
    # Allow multiple var/declaration statements to be cuddled.
    allow-cuddle-declarations: true
    # A list of call idents that everything can be cuddled with.
    # Defaults to calls looking like locks.
    allow-cuddle-with-calls: ["Lock", "RLock"]
    # AllowCuddleWithRHS is a list of right hand side variables that is allowed
    # to be cuddled with anything. Defaults to assignments or calls looking
    # like unlocks.
    allow-cuddle-with-rhs: ["Unlock", "RUnlock"]
    # Causes an error when an If statement that checks an error variable doesn't
    # cuddle with the assignment of that variable.
    force-err-cuddling: true
    # When force-err-cuddling is enabled this is a list of names
    # used for error variables to check for in the conditional.
    error-variable-names: ["err","errs"]
    # Causes an error if a short declaration (:=) cuddles with anything other than
    # another short declaration.
    # This logic overrides force-err-cuddling among others.
    force-short-decl-cuddling: false

issues:
  # Default: 50
  max-issues-per-linter: 100

  exclude:
    # Sometimes goerr113 is too annoying
    - do not define dynamic errors, use wrapped static errors instead

  exclude-rules:
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - goconst

    # Long links.
    - linters:
      - lll
      source: "^\\s+//\\s+http\\S+$"

    - source: "^func Test|Benchmark"
      linters:
        - funlen
